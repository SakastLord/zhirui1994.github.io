{"version":3,"sources":["commons/config.js","commons/schemas.js","utils/getToken.js","services/github.js","components/Loading/style.module.scss","models/repository.js","models/entities.js","utils/urlSearchParser.js","commons/const.js","models/user.js","models/index.js","services/serviceWorker.js","pages/App.js","index.js","components/Loading/index.js"],"names":["config","owner","repo","token","client_id","client_secret","milestone","schema","Entity","label","comment","issue","labels","nodes","comments","repository","issues","milestones","getToken","secret","atob","regexp","RegExp","concat","replace","initIndex","_initIndex","apply","this","arguments","_callee","regenerator_default","a","wrap","_context","prev","next","abrupt","axios","post","query","headers","Authorization","then","response","normalize","data","stop","getSingleIssue","_x","_getSingleIssue","_callee2","number","_context2","getLoginAuthLink","scope","redirect_uri","encodeURIComponent","queryString","Object","keys","map","key","join","userAuth","_x2","_userAuth","_callee3","code","_context3","Accept","getViewer","_x3","_getViewer","_callee4","_context4","viewer","addComment","_x4","_addComment","_callee5","_ref","id","content","_context5","commentEdge","node","commentSchema","initEditor","_initEditor","_callee6","_context6","repositoryObj","searchIssues","_x5","_searchIssues","_callee7","params","_context7","length","trim","search","norNodes","issueSchema","objectSpread","result","entities","createIssue","_x6","_createIssue","_callee8","_context8","title","body","JSON","stringify","module","exports","loadingContainer","object","require","name","state","loading","searchParams","reducers","update","payload","merge","effects","dispatch","asyncToGenerator","mark","_","rootState","githubServices","sent","closeCurrentIssue","_closeCurrentIssue","currentRepository","newEntities","repositories","undefined","defineProperty","_x7","_x8","pageInfo","totalCount","issueCount","_x9","_x10","_x11","_x12","getSearchCode","URLSearchParams","window","location","get","delete","toString","url","pathname","hash","history","pushState","models","user","auth","accessToken","tokenType","email","login","avatarUrl","getAuthToken","_getAuthToken","userCache","_JSON$parse","access_token","token_type","oauth","_user","localStorage","getItem","parse","setItem","_addComment2","callback","issuesMap","commentIssue","push","Boolean","hostname","match","routerConfig","path","exact","component","lazy","Promise","all","__webpack_require__","e","bind","App","react_default","createElement","HashRouter","react","fallback","Loading","Switch","route","Route","d","__webpack_exports__","store","init","ReactDOM","render","es","pages_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister","react__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_0___default","n","_style_module_scss__WEBPACK_IMPORTED_MODULE_1__","_style_module_scss__WEBPACK_IMPORTED_MODULE_1___default","children","_ref$loading","className","styles"],"mappings":"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","file":"static/js/main.e645517d.chunk.js","sourcesContent":["\r\nexport default {\r\n    owner: 'zhirui1994',\r\n    repo: 'zhirui1994.github.io',\r\n    token: 'MSt6aGlydWkxOTk0KzBhOGZmMjAwNWM3M2NmNmM1YzEzYWQyZmRkZjhjN2E4MDU0NzdlK3poaXJ1aTE5OTQuZ2l0aHViLmlvKzg=',\r\n    client_id: '635ab95d562259d5e20a',\r\n    client_secret: 'e795e7e409ce731cf304facd92aecd305c774731',\r\n}","import { schema } from 'normalizr';\n\nexport const milestone = new schema.Entity('milestones');\nexport const label = new schema.Entity('labels');\nexport const comment = new schema.Entity('comments');\nexport const issue = new schema.Entity('issues', {\n    milestone: milestone,\n    labels: {\n        nodes: [label]\n    },\n    comments: {\n        nodes:[comment]\n    },\n});\nexport const repository = new schema.Entity('repositories', {\n    issue,\n    issues: {\n        nodes: [issue]\n    },\n    labels: {\n        nodes: [label]\n    },\n    milestones: {\n        nodes: [milestone]\n    },\n})","import config from '../commons/config';\n\nexport default function getToken() {\n    const secret = atob(config.token);\n    const regexp = new RegExp(`(\\\\+${config.owner}\\\\+|\\\\+${config.repo}\\\\+)`,'g');\n    const token = secret.replace(regexp,'');\n    return token;\n}","import axios from 'axios';\nimport { normalize } from 'normalizr';\nimport config from '../commons/config';\nimport { repository, comment as commentSchema, issue as issueSchema } from '../commons/schemas';\nimport getToken from '../utils/getToken';\n\nexport async function initIndex() {\n    return axios.post(\n        'https://api.github.com/graphql',\n        {\n            query: `query { \n                repository(owner: \"${config.owner}\", name: \"${config.repo}\") {\n                    id,\n                    labels(first: 100) {\n                        nodes {\n                            id,\n                            name,\n                            color,\n                        } \n                    },\n                    milestones(first:100) {\n                        nodes {\n                            id,\n                            number,\n                            state,\n                            title,\n                        }\n                    },\n                    issues(last:20, states:OPEN, orderBy: {direction: DESC, field: UPDATED_AT}) {\n                        pageInfo {\n                            endCursor,\n                            startCursor,\n                            hasNextPage,\n                            hasPreviousPage\n                        },\n                        totalCount,\n                        nodes {\n                            id,\n                            title,\n                            number,\n                            createdAt,\n                            milestone {\n                                id\n                            },\n                            labels(first:100) {\n                                nodes {\n                                    id,\n                                }\n                            }\n                        }\n                    }\n                }\n            }`\n        },\n        {\n            headers: {\n                Authorization: `bearer ${getToken()}`\n            },\n        }\n    ).then(response => {\n        return normalize(response.data.data.repository, repository);\n    });\n}\n\nexport async function getSingleIssue(number) {\n    return axios.post(\n        'https://api.github.com/graphql',\n        {\n            query: `query { \n                repository(owner: \"${config.owner}\", name: \"${config.repo}\") {\n                    id,\n                    issue(number: ${number}) {\n                        id,\n                        title,\n                        number,\n                        bodyHTML,\n                        createdAt,\n                        milestone {\n                            id,\n                            number,\n                            state,\n                            title,\n                        },\n                        labels(first:100) {\n                            nodes {\n                                id,\n                                name,\n                                color,\n                            }\n                        },\n                        comments(last: 20) {\n                            nodes {\n                                id,\n                                author {\n                                    avatarUrl,\n                                    login,\n                                    url,\n                                },\n                                bodyHTML,\n                                createdAt,\n                            }\n                        }\n                    }\n                }\n            }`\n        },\n        {\n            headers: {\n                Authorization: `bearer ${getToken()}`\n            },\n        }\n    ).then(response => {\n        return normalize(response.data.data.repository, repository);\n    })\n}\n\nexport function getLoginAuthLink() {\n    const query = {\n        scope: 'public_repo, user',\n        redirect_uri: encodeURIComponent(`https://zhirui1994.github.io/#/article/1`),\n        client_id: config.client_id,\n    }\n    const queryString = Object.keys(query).map(key => `${key}=${query[key]}`).join('&');\n    return `https://github.com/login/oauth/authorize?${queryString}`\n}\n\nexport async function userAuth(code) {\n    const proxyUrl = 'https://cors-anywhere.herokuapp.com/https://github.com/login/oauth/access_token'\n    return axios.post(proxyUrl, {\n        code,\n        client_id: config.client_id,\n        client_secret: config.client_secret,\n    },\n    {\n        headers: {\n            Accept: 'application/json'\n        }\n    }).then(response => {\n        return response && response.data;\n    })\n}\n\nexport async function getViewer(token) {\n    return axios.post('https://api.github.com/graphql', {\n        query: `query { \n            viewer {\n                email,\n                id,\n                login,\n                name,\n                url,\n                avatarUrl, \n            }\n        }`\n        },\n        {\n            headers: {\n                Authorization: token,\n            }\n        }\n    ).then(response => {\n        return response && response.data && response.data.data && response.data.data.viewer;\n    });\n}\n\nexport async function addComment({id, content, token}) {\n    return axios.post(\n        'https://api.github.com/graphql',\n        {\n            query: `mutation {\n                addComment(input:{subjectId: \"${id}\", body: \"${content}\"}) {\n                    commentEdge {\n                        node {\n                            id,\n                            bodyHTML,\n                            createdAt,\n                            author {\n                                avatarUrl,\n                                login,\n                                url,\n                            },\n                        }\n                    }\n                }\n            }`\n        },\n        {\n            headers: {\n                Authorization: token,\n            }\n        }\n    ).then(response => {\n        const comment = response && response.data && response.data.data\n            && response.data.data.addComment.commentEdge.node;\n        if (comment) {\n            return normalize(comment, commentSchema)\n        }\n    });\n}\n\nexport async function initEditor() {\n    return axios.post(\n        'https://api.github.com/graphql',\n        {\n            query: `query {\n                repository(owner: \"${config.owner}\", name: \"${config.repo}\") {\n                    id,\n                    labels(first: 100) {\n                        nodes {\n                            id,\n                            name,\n                            color,\n                        } \n                    },\n                    milestones(first:100) {\n                        nodes {\n                            id,\n                            number,\n                            state,\n                            title,\n                        }\n                    },\n                }\n            }`\n        },\n        {\n            headers: {\n                Authorization: `bearer ${getToken()}`\n            },\n        }\n    ).then(response => {\n        const repositoryObj = response && response.data\n            && response.data.data && response.data.data.repository;\n        if (repositoryObj) {\n            return normalize(repositoryObj, repository);\n        } else {\n            return false;\n        }\n    })\n}\n\nexport async function searchIssues(params) {\n    let queryString = `repo:${config.owner}/${config.repo} `;\n    if (params && params.milestone) {\n        queryString += `milestone:${params.milestone} `;\n    }\n    if (params && params.labels && params.labels.length) {\n        queryString += params.labels.map(label => `label:${label} `).join('');\n    }\n    if (params && params.query) {\n        queryString += `${params.query} `\n    }\n    return axios.post(\n        'https://api.github.com/graphql',\n        {\n            query: `query {\n                search(type: ISSUE, last: 20, query: \"${queryString.trim()}\") {\n                    issueCount\n                    pageInfo {\n                        endCursor\n                        startCursor\n                        hasNextPage\n                        hasPreviousPage\n                    }\n                    nodes {\n                        ... on Issue {\n                            id,\n                            title,\n                            number,\n                            createdAt,\n                            milestone {\n                                id\n                            },\n                            labels(first:100) {\n                                nodes {\n                                    id,\n                                }\n                            }\n                        }\n                    }\n                }\n            }`,\n        },\n        {\n            headers: {\n                Authorization: `bearer ${getToken()}`\n            },\n        }\n    ).then(response => {\n        const search = response && response.data && response.data.data && response.data.data.search;\n        if (search) {\n            const norNodes = normalize(search.nodes, [issueSchema]);\n            return {\n                ...search,\n                nodes: norNodes.result,\n                entities: norNodes.entities,\n            }\n        } else {\n            return false;\n        }\n    });\n}\n\n\nexport async function createIssue(params) {\n    return axios.post('https://api.github.com/graphql',\n    {\n        query: `mutation {\n            createIssue(input: {\n                title: \"${params.title}\",\n                body: \"${params.body}\",\n                labelIds: \"${JSON.stringify(params.labels)}\",\n                milestoneId: \"${params.milestone}\",\n                repositoryId: \"${params.repository}\"\n            }) {\n                clientMutationId\n                issue {\n                    id,\n                    title,\n                    number,\n                    bodyHTML,\n                    createdAt,\n                    milestone {\n                        id,\n                        number,\n                        state,\n                        title,\n                    },\n                    labels(first:100) {\n                        nodes {\n                            id,\n                            name,\n                            color,\n                        }\n                    },\n                    comments(last: 20) {\n                        nodes {\n                            id,\n                            author {\n                                avatarUrl,\n                                login,\n                                url,\n                            },\n                            bodyHTML,\n                            createdAt,\n                        }\n                    }\n                }\n            }\n        }`,\n    },\n    {\n        headers: {\n            Authorization: `bearer ${getToken()}`\n        },\n    }).then(response => {\n        const issue = response && response.data && response.data.data\n            && response.data.data.createIssue.issue;\n\n        if (issue) {\n            return normalize(issue, issueSchema);\n        }\n    })\n}\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"loadingContainer\":\"style_loadingContainer__3Pquw\"};","import * as githubServices from '../services/github'\n\nconst object = require('lodash/fp/object');\n\nexport default {\n    name: 'repository',\n    state: {\n        result: '',\n        loading: true,\n        searchParams: {\n            milestone: '*',\n            labels: [],\n            query: '', \n        }\n    },\n    reducers: {\n        update(state, payload) {\n            return object.merge(state, payload);\n        }\n    },\n    effects: (dispatch) => ({\n        async initIndex(_, rootState) {\n            if (!rootState.repository.loading) {\n                await dispatch.repository.update({\n                    loading: true,\n                });\n            }\n            const response = await githubServices.initIndex()\n            if (response) {\n                await dispatch.entities.update(response.entities);\n                await dispatch.repository.update({\n                    result: response.result,\n                    loading: false,\n                });\n            }\n        },\n        async getSingleIssue(number, rootState) {\n            if (!rootState.repository.loading) {\n                await dispatch.repository.update({\n                    loading: true,\n                });\n            }\n            const response = await githubServices.getSingleIssue(number)\n            if (response) {\n                await dispatch.entities.update(response.entities);\n                await dispatch.repository.update({\n                    result: response.result,\n                    loading: false,\n                })\n            }\n        },\n        async closeCurrentIssue(_, rootState) {\n            const result = rootState.repository.result;\n            const currentRepository = rootState.entities.repositories[result];\n            if (currentRepository) {\n                currentRepository.issue = undefined;\n                const newEntities = {\n                    repositories: {\n                        [result]: currentRepository\n                    }\n                };\n                await dispatch.entities.update(newEntities);\n            }\n        },\n        async initEditor(_, rootState) {\n            const result = rootState.repository.result;\n            const currentRepository = rootState.entities.repositories[result];\n            if(\n                currentRepository &&\n                currentRepository.labels &&\n                currentRepository.labels.nodes.length &&\n                currentRepository.milestones &&\n                currentRepository.milestones.nodes.length\n            ) {\n                return;\n            }\n            if (!rootState.repository.loading) {\n                await dispatch.repository.update({\n                    loading: true,\n                });\n            }\n            const response = await githubServices.initEditor()\n            if (response) {\n                await dispatch.entities.update(response.entities);\n                await dispatch.repository.update({\n                    result: response.result,\n                    loading: false,\n                });\n            }\n        },\n        async searchIssues(payload, rootState) {\n            const { milestone, labels, query } = payload;\n            await dispatch.repository.update({\n                searchParams: {\n                    milestone,\n                    labels,\n                    query,\n                }\n            })\n            const response = await githubServices.searchIssues({\n                milestone,\n                labels,\n                query,\n            });\n            if (response) {\n                const result = rootState.repository.result;\n                const currentRepository = rootState.entities.repositories[result];\n                if (currentRepository) {\n                    currentRepository.issues = {\n                        pageInfo: response.pageInfo,\n                        totalCount: response.issueCount,\n                        nodes: response.nodes,\n                    }\n                    dispatch.entities.update({\n                        repositories: {\n                            [result]: currentRepository,\n                        },\n                        ...response.entities,\n                    })\n                }\n            }\n        },\n        async createIssue(payload, rootState) {\n            const response =  await githubServices.createIssue(payload);\n            if (response && response.result) {\n                const currentRepository = rootState.entities.repositories[rootState.repository.result];\n                currentRepository.issue = response.result;\n                await dispatch.entities.update({\n                    ...response.entities,\n                    repositories: {\n                        [rootState.repository.result]: currentRepository,\n                    }\n                });\n            }\n        }\n    })\n}","const object = require('lodash/fp/object');\n\nexport default {\n    name: 'entities',\n    state: {\n        repositories: {},\n        issues: {},\n        labels: {},\n        milestones: {},\n        comments: {},\n    },\n    reducers: {\n        update(state, payload) {\n            return object.merge(state, payload)\n        },\n    }\n}","export function getSearchCode() {\n    const searchParams = new URLSearchParams(window.location.search);\n    const code = searchParams.get('code');\n    if (code) {\n        searchParams.delete('code');\n        const search = searchParams.toString();\n        const url = `${window.location.pathname}${search ? `?${search}` : ''}${window.location.hash}`;\n        window.history.pushState(null, null, url)\n        return code;\n    } else {\n        return '';\n    }\n}","export const USER_AUTH = 'GITHUB_USER_AUTH';","import { userAuth, getViewer, addComment } from '../services/github';\nimport { getSearchCode } from '../utils/urlSearchParser';\nimport { USER_AUTH } from '../commons/const';\n\nconst object = require('lodash/fp/object');\n\nexport default {\n    name: 'user',\n    state: {\n        loading: false,\n        auth: false,\n        accessToken: '',\n        scope: '',\n        tokenType: '',\n        viewer: {\n            email: '',\n            id: '',\n            login: '',\n            name: '',\n            url: '',\n            avatarUrl: ''\n        }\n    },\n    reducers: {\n        update(state, payload) {\n            return object.merge(state, payload)\n        },\n    },\n    effects: (dispatch) => ({\n        async getAuthToken(_, rootState) {\n            if (!rootState.user.loading) {\n                await dispatch.user.update({\n                    loading: true,\n                })\n            }\n\n            const code = getSearchCode();\n            const userCache = localStorage.getItem(USER_AUTH);\n            if (userCache ) {\n                const { \n                    access_token,\n                    token_type,\n                    scope,\n                } = JSON.parse(userCache);\n                const user = await getViewer(`${token_type} ${access_token}`)\n                if (user) {\n                    await dispatch.user.update({\n                        accessToken: access_token,\n                        tokenType: token_type,\n                        scope: scope,\n                        auth: true,\n                        loading: false,\n                        viewer: user,\n                    })\n                }\n            } else if (code) {\n                const oauth = await userAuth(code);\n                if (oauth && oauth.access_token) {\n                    localStorage.setItem(USER_AUTH, JSON.stringify(oauth));\n                    const user = await getViewer(`${oauth.token_type} ${oauth.access_token}`)\n                    if (user) {\n                        await dispatch.user.update({\n                            accessToken: oauth.access_token,\n                            tokenType: oauth.token_type,\n                            scope: oauth.scope,\n                            auth: true,\n                            loading: false,\n                            viewer: user,\n                        })\n                    }\n                }\n            }\n\n            await dispatch.user.update({\n                loading: false,\n            })\n        },\n        async addComment({id, content, callback}, rootState) {\n            if (!rootState.user.accessToken) {\n                return;\n            }\n\n            const token = `${rootState.user.tokenType} ${rootState.user.accessToken}`;\n            const comment = await addComment({id, content, token});\n            if (comment) {\n                const issuesMap = rootState.entities.issues;\n                const commentIssue = issuesMap[id];\n                commentIssue.comments.nodes.push(comment.result)\n                await dispatch.entities.update({\n                    issues: {\n                        [id]: commentIssue,\n                    },\n                    ...comment.entities,\n                })\n                typeof callback === 'function' && callback();\n            }\n        }\n    })\n}","import repository from './repository';\nimport entities from './entities';\nimport user from './user';\n\nexport default {\n    user,\n    entities,\n    repository,\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React, { Suspense, lazy } from 'react';\nimport { HashRouter as Router, Route, Switch } from 'react-router-dom';\nimport Loading from '../components/Loading'\n\nconst routerConfig = [\n    {\n        path: '/',\n        exact: true,\n        component: lazy(() => import('./Index')),\n    },\n    {\n        path: '/editor',\n        exact: true,\n        component: lazy(() => import('./Editor')),\n    },\n    {\n        path: '/article/:number',\n        exact: true,\n        component: lazy(() => import('./Article')),\n    }\n];\n\nconst App = () => {\n    return (\n        <Router>\n            <Suspense fallback={<Loading loading={true} />}>\n                <Switch>\n                    {routerConfig.map(route =>\n                        (<Route\n                            key={route.path}\n                            path={route.path}\n                            exact={route.exact}\n                            component={() => <route.component />}\n                        />)\n                    )}\n                </Switch>\n            </Suspense>\n        </Router>\n    );\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { init } from '@rematch/core';\nimport { Provider } from 'react-redux';\nimport models from './models/index';\nimport * as serviceWorker from './services/serviceWorker';\nimport App from './pages/App';\nimport './styles/index.scss';\n\nexport const store = init({\n    models,\n}) \n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>,\n    document.getElementById('root')\n);\n\nserviceWorker.unregister();\n","import React, { Fragment } from 'react';\nimport styles from './style.module.scss';\n\nconst Loading = ({ children, loading=true }) => {\n    if (loading) {\n        return (\n            <div className={styles.loadingContainer} >\n                <i className=\"fa fa-spinner fa-pulse\"></i>\n            </div>\n        );\n    } else {\n        return (\n            <Fragment>\n                {children}\n            </Fragment>\n        );\n    }\n}\n\nexport default Loading;\n"],"sourceRoot":""}