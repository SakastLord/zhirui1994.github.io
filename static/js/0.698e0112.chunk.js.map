{"version":3,"sources":["components/MarkdownPreviewer/style.module.scss","pages/Editor/style.module.scss","components/MarkdownPreviewer/index.js","pages/Editor/index.js"],"names":["module","exports","markdownPreviewer","editController","active","editorContainer","header","titleInput","fileds","checkLabel","submitButton","editorContent","marked","setOptions","breaks","highlight","code","hljs","highlightAuto","value","MarkdownPreviewer","state","isEdiotr","handleInput","e","onChange","_this","props","editor","preventDefault","preview","innerHTML","handleClickPreview","setState","handleClickEditor","defaultValue","this","_this2","react_default","a","createElement","className","styles","onClick","id","spellCheck","ref","textarea","onInput","section","Component","EditorPage","title","body","milestone","labels","handleChange","handleTitleChange","target","handleRadioClick","input","stopPropagation","tagName","querySelector","handleCheckboxClick","idx","indexOf","splice","Object","toConsumableArray","push","handleSubmit","dispatch","_this$state","params","callback","url","history","number","repository","editIssue","objectSpread","createIssue","handleBack","goBack","_this$props","labelsList","milestonesList","length","initEditor","closeCurrentIssue","_this$props2","loading","Loading","htmlFor","type","classNames","components_MarkdownPreviewer","map","key","readOnly","name","checked","label","concat","style","display","isPWA","Date","getFullYear","memoize","match","currentIssue","milestonesMap","labelsMap","prevCurrentIssue","nodes","PureComponent","mapState","createSelector","store","result","entities","repositories","milestones","issues","repositoriesMap","issuesMap","currentRepository","currentIssueId","issue","connect","withRouter"],"mappings":"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","file":"static/js/0.698e0112.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"markdownPreviewer\":\"style_markdownPreviewer__1aG82\",\"editController\":\"style_editController__3IoEo\",\"active\":\"style_active__fRCJR\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"editorContainer\":\"style_editorContainer__2CpJ4\",\"header\":\"style_header__b0b1a\",\"titleInput\":\"style_titleInput__13kzQ\",\"fileds\":\"style_fileds__3fJcb\",\"checkLabel\":\"style_checkLabel__3_j0j\",\"submitButton\":\"style_submitButton__1urt6\",\"editorContent\":\"style_editorContent__1vN33\"};","import React, { Component } from 'react';\nimport marked from 'marked';\nimport styles from './style.module.scss';\nimport hljs from 'highlight.js';\nimport 'highlight.js/styles/github-gist.css';\n\nmarked.setOptions({\n    breaks: true,\n    highlight: (code) => {\n        return hljs.highlightAuto(code).value;\n    }\n})\n\nclass MarkdownPreviewer extends Component {\n    state = {\n        isEdiotr: true,\n    };\n\n    componentDidMount() {\n        const { defaultValue } = this.props;\n        if (defaultValue) {\n            this.preview.innerHTML = marked(defaultValue);\n        }\n    }\n\n    handleInput = (e) => {\n        const { onChange } = this.props;\n        const value = this.editor.value;\n        e.preventDefault();\n        typeof onChange === 'function' && onChange(value);\n        this.preview.innerHTML = marked(value);\n    }\n\n    handleClickPreview = () => {\n        this.setState({\n            isEdiotr: false,\n        });\n    }\n\n    handleClickEditor = () => {\n        this.setState({\n            isEdiotr: true,\n        });\n    }\n\n    render() {\n        const { defaultValue } = this.props;\n        const { isEdiotr } = this.state;\n        return (\n            <div className={styles.markdownPreviewer}>\n                <ul className={styles.editController}>\n                    <li onClick={this.handleClickPreview} className={!isEdiotr ? styles.active : 'hidden'}>预览</li>\n                    <li onClick={this.handleClickEditor} className={isEdiotr ? styles.active : 'hidden'}>编辑</li>\n                </ul>\n                <textarea\n                    id=\"editor\"\n                    spellCheck=\"false\"\n                    className={isEdiotr ? styles.active : 'hidden'}\n                    ref={textarea => this.editor = textarea}\n                    onInput={this.handleInput}\n                    defaultValue={defaultValue}\n                ></textarea>\n                <section\n                    className={!isEdiotr ? styles.active : 'hidden'}\n                    id=\"preview\"\n                    ref={section => this.preview = section}\n                ></section>\n            </div>\n        );\n    }\n}\n\nexport default MarkdownPreviewer;\n","import React, { PureComponent } from 'react';\nimport classNames from 'classnames';\nimport memoize from 'memoize-one';\nimport { withRouter } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport { createSelector } from 'reselect';\nimport MarkdownPreviewer from '../../components/MarkdownPreviewer';\nimport Loading from '../../components/Loading';\nimport { isPWA } from '../../utils/urlSearchParser';\nimport styles from './style.module.scss';\n\nclass EditorPage extends PureComponent {\n    state = {\n        title: '',\n        body: '',\n        milestone: void(0),\n        labels: [],\n    }\n\n    get number() {\n        return memoize(\n            (match) => match.params.number\n        )(this.props.match);\n    }\n\n    static getDerivedStateFromProps(props, state) {\n        const { match, currentIssue, milestonesMap, labelsMap } = props;\n        const { prevCurrentIssue } = state;\n        const number = match.params.number;\n        if (\n            number &&\n            currentIssue &&\n            currentIssue.number === +number &&\n            currentIssue !== prevCurrentIssue\n        ) {\n            const title = currentIssue.title || '';\n            const body = currentIssue.body || '';\n            const milestone = milestonesMap[currentIssue.milestone].number || '';\n            const labels = (currentIssue.labels\n                && currentIssue.labels.nodes\n                && currentIssue.labels.nodes.map(id => {\n                    return labelsMap[id].name;\n                })) || [];\n\n            return {\n                prevCurrentIssue: currentIssue,\n                title,\n                body,\n                milestone,\n                labels,\n            }\n        } else {\n            return null;\n        }\n    }\n\n    componentDidMount() {\n        const { labelsList, milestonesList, dispatch } = this.props;\n        const number = this.number;\n        if (!labelsList.length || !milestonesList.length || number) {\n            dispatch.repository.initEditor(number);\n        }\n    }\n\n    componentWillUnmount() {\n        const { dispatch } = this.props;\n        dispatch.repository.closeCurrentIssue();\n    }\n\n    handleChange = (value) => {\n        this.setState({\n            body: value,\n        });\n    }\n\n    handleTitleChange = (e) => {\n        const title = e.target.value;\n        this.setState({\n            title,\n        });\n    }\n\n    handleRadioClick = (e) => {\n        e.stopPropagation();\n        let input;\n        if (e.target.tagName === 'LABEL') {\n            e.preventDefault();\n            input = e.target.querySelector('input');\n        } else if (e.target.tagName === 'INPUT') {\n            input = e.target;\n        }\n        if (input) {\n            const value = +input.value;\n            if (this.state.milestone === value) {\n                this.setState({\n                    milestone: void(0),\n                });\n            } else {\n                this.setState({\n                    milestone: value,\n                });\n            }\n        }\n        return false;\n    }\n\n    handleCheckboxClick = (e) => {\n        e.stopPropagation();\n        let input;\n        if (e.target.tagName === 'LABEL') {\n            e.preventDefault();\n            input = e.target.querySelector('input');\n        } else if (e.target.tagName === 'INPUT') {\n            input = e.target;\n        }\n        if (input) {\n            const labels = this.state.labels;\n            const value = input.value;\n            const idx = labels.indexOf(value);\n            if (idx !== -1) {\n                labels.splice(idx, 1);\n                this.setState({\n                    labels: [...labels],\n                });\n            } else {\n                labels.push(value);\n                this.setState({\n                    labels: [...labels],\n                });\n            }\n        }\n        return false;\n    }\n\n    handleSubmit = (e) => {\n        e.preventDefault();\n        e.stopPropagation();\n        const { dispatch } = this.props;\n        const { title, body, milestone, labels } = this.state; \n        if (title && body && milestone && labels) {\n            const params = {\n                title,\n                body,\n                labels,\n                milestone,\n                callback: (url) => {\n                    this.props.history.push(url)\n                }\n            };\n            const number = this.number;\n            if (number) {\n                dispatch.repository.editIssue({\n                    ...params,\n                    number,\n                })\n            } else {\n                dispatch.repository.createIssue(params)\n            }\n        }\n    }\n\n    handleBack = () => {\n        this.props.history.goBack();\n    }\n\n    render() {\n        const { labelsList, milestonesList, loading } = this.props;\n        const number = this.number;\n        return (\n            \n            <div className={styles.editorContainer}>\n                <header className={styles.header}>\n                    <i onClick={this.handleBack} className=\"fa fa-chevron-left\"></i>\n                    <p>文章编辑</p>\n                </header>\n                <Loading loading={loading}>\n                    <main>\n                        <form>\n                            <label className={styles.fileds} htmlFor=\"title\">标题：\n                                <input\n                                    type=\"text\"\n                                    id=\"title\"\n                                    className={styles.titleInput}\n                                    defaultValue={this.state.title}\n                                    onChange={this.handleTitleChange}\n                                    />\n                            </label>\n                            <label className={classNames(styles.fileds, styles.editorContent)} htmlFor=\"editor\">内容：\n                                <MarkdownPreviewer\n                                    defaultValue={this.state.body}\n                                    onChange={this.handleChange}\n                                />\n                            </label>\n                            <label className={styles.fileds} htmlFor=\"milestone\">\n                                分类：\n                                {milestonesList.map(milestone => {\n                                    return (\n                                        <label\n                                            key={milestone.id}\n                                            className={styles.checkLabel}\n                                            onClick={this.handleRadioClick}\n                                        >\n                                            <input\n                                                readOnly\n                                                type=\"radio\"\n                                                name=\"categories\"\n                                                value={milestone.number}\n                                                checked={this.state.milestone === milestone.number}\n                                            />\n                                            {milestone.title}\n                                        </label>\n                                    );\n                                })}\n                            </label>\n                            <label className={styles.fileds} htmlFor=\"labels\">\n                                标签：\n                                {labelsList.map(label => {\n                                    return (\n                                        <label\n                                            key={label.id}\n                                            className={styles.checkLabel}\n                                            onClick={this.handleCheckboxClick}\n                                        >\n                                            <input\n                                                readOnly\n                                                type=\"checkbox\"\n                                                value={label.name}\n                                                name={`label-${label.name}`}\n                                                checked={this.state.labels.indexOf(label.name) !== -1}\n                                            />\n                                            {label.name}\n                                        </label>\n                                    );\n                                })}\n                            </label>\n                            <input\n                                type=\"submit\"\n                                value={number ? \"修改\" : \"创建\"}\n                                className={styles.submitButton}\n                                onClick={this.handleSubmit}\n                            />\n                        </form>\n                    </main>\n                </Loading>\n                <footer style={{display: isPWA() ? 'none' : ''}}>\n                    <p>Copyright ©{new Date().getFullYear()} Roy Zhi</p>\n                </footer>\n            </div>\n        );\n    }\n}\n\nconst mapState = createSelector(\n    [\n        store => store.repository.result,\n        store => store.repository.loading,\n        store => store.entities.repositories,\n        store => store.entities.labels,\n        store => store.entities.milestones,\n        store => store.entities.issues,\n    ],\n    (\n        result,\n        loading,\n        repositoriesMap,\n        labelsMap,\n        milestonesMap,\n        issuesMap\n    ) => {\n        let labelsList = [], milestonesList = [], currentIssue;\n        const currentRepository = repositoriesMap[result];\n        if (\n            currentRepository &&\n            currentRepository.labels &&\n            currentRepository.labels.nodes &&\n            currentRepository.milestones &&\n            currentRepository.milestones.nodes\n        ) {\n            labelsList = currentRepository.labels.nodes.map(id => labelsMap[id]);\n            milestonesList = currentRepository.milestones.nodes.map(id => milestonesMap[id]);\n            const currentIssueId = currentRepository.issue;\n            if (currentIssueId) {\n                currentIssue = issuesMap[currentIssueId]\n            }\n        }\n        return {\n            loading,\n            labelsMap,\n            labelsList,\n            milestonesMap,\n            milestonesList,\n            currentIssue,\n        }\n    }\n)\n\nexport default connect(mapState)(withRouter(EditorPage));\n"],"sourceRoot":""}