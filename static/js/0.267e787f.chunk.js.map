{"version":3,"sources":["components/MarkdownPreviewer/style.module.scss","pages/Editor/style.module.scss","components/MarkdownPreviewer/index.js","pages/Editor/index.js"],"names":["module","exports","markdownPreviewer","editorContainer","header","fileds","checkLabel","submitButton","editorContent","marked","setOptions","breaks","highlight","code","hljs","highlightAuto","value","MarkdownPreviewer","handleInput","e","onChange","_this","props","editor","preventDefault","preview","innerHTML","defaultValue","this","_this2","react_default","a","createElement","className","styles","id","spellCheck","ref","textarea","onInput","section","Component","EditorPage","state","title","content","milestone","labels","number","memoize","match","params","handleChange","setState","handleRadioClick","input","label","currentTarget","querySelector","checked","handleCheckboxClick","idx","indexOf","push","Object","toConsumableArray","splice","handleSubmit","stopPropagation","dispatch","body","callback","url","history","repository","editIssue","objectSpread","createIssue","_this$props","labelsList","milestonesList","length","initEditor","_this$props2","loading","Loading","htmlFor","type","classNames","components_MarkdownPreviewer","map","key","onClick","name","concat","Date","getFullYear","currentIssue","milestonesMap","labelsMap","prevCurrentIssue","nodes","PureComponent","mapState","createSelector","store","result","entities","repositories","milestones","issues","repositoriesMap","issuesMap","currentRepository","currentIssueId","issue","connect","withRouter"],"mappings":"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","file":"static/js/0.267e787f.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"markdownPreviewer\":\"style_markdownPreviewer__1aG82\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"editorContainer\":\"style_editorContainer__2CpJ4\",\"header\":\"style_header__b0b1a\",\"fileds\":\"style_fileds__3fJcb\",\"checkLabel\":\"style_checkLabel__3_j0j\",\"submitButton\":\"style_submitButton__1urt6\",\"editorContent\":\"style_editorContent__1vN33\"};","import React, { Component } from 'react';\nimport marked from 'marked';\nimport styles from './style.module.scss';\nimport hljs from 'highlight.js';\nimport 'highlight.js/styles/github-gist.css';\n\nmarked.setOptions({\n    breaks: true,\n    highlight: (code) => {\n        return hljs.highlightAuto(code).value;\n    }\n})\n\nclass MarkdownPreviewer extends Component {\n    handleInput = (e) => {\n        const { onChange } = this.props;\n        const value = this.editor.value;\n        e.preventDefault();\n        typeof onChange === 'function' && onChange(value);\n        this.preview.innerHTML = marked(value);\n    }\n\n    componentDidMount() {\n        const { defaultValue } = this.props;\n        if (defaultValue) {\n            this.preview.innerHTML = marked(defaultValue);\n        }\n    }\n\n    render() {\n        const { defaultValue } = this.props;\n        return (\n            <div className={styles.markdownPreviewer}>\n                <textarea\n                    id=\"editor\"\n                    spellCheck=\"false\"\n                    ref={textarea => this.editor = textarea}\n                    onInput={this.handleInput}\n                    defaultValue={defaultValue}\n                ></textarea>\n                <section\n                    id=\"preview\"\n                    ref={section => this.preview = section}\n                ></section>\n            </div>\n        );\n    }\n}\n\nexport default MarkdownPreviewer;\n","import React, { PureComponent } from 'react';\nimport classNames from 'classnames';\nimport memoize from 'memoize-one';\nimport { withRouter } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport { createSelector } from 'reselect';\nimport MarkdownPreviewer from '../../components/MarkdownPreviewer';\nimport Loading from '../../components/Loading';\nimport styles from './style.module.scss';\n\nclass EditorPage extends PureComponent {\n    state = {\n        title: '',\n        content: '',\n        milestone: '',\n        labels: [],\n    }\n\n    number = memoize((match) => {\n        return match.params.number;\n    });\n\n    static getDerivedStateFromProps(props, state) {\n        const { match, currentIssue, milestonesMap, labelsMap } = props;\n        const { prevCurrentIssue } = state;\n        const number = match.params.number;\n        if (\n            number &&\n            currentIssue &&\n            currentIssue.number === +number &&\n            currentIssue !== prevCurrentIssue\n        ) {\n            const title = currentIssue.title || '';\n            const content = currentIssue.body || '';\n            const milestone = milestonesMap[currentIssue.milestone].number || '';\n            const labels = (currentIssue.labels\n                && currentIssue.labels.nodes\n                && currentIssue.labels.nodes.map(id => {\n                    return labelsMap[id].name;\n                })) || [];\n\n            return {\n                prevCurrentIssue: currentIssue,\n                title,\n                content,\n                milestone,\n                labels,\n            }\n        } else {\n            return null;\n        }\n    }\n\n    componentDidMount() {\n        const { labelsList, milestonesList, dispatch } = this.props;\n        const number = this.number;\n        if (!labelsList.length || !milestonesList.length) {\n            dispatch.repository.initEditor(number);\n        }\n    }\n\n    handleChange = (value) => {\n        this.setState({\n            content: value,\n        });\n    }\n\n    handleRadioClick = (e) => {\n        const label = e.currentTarget;\n        let input;\n        if (label && (input = label.querySelector('input')) && input) {\n            if (input.checked) {\n                this.setState({\n                    milestone: input.value,\n                });\n            } else {\n                this.setState({\n                    milestone: '',\n                });\n            }\n        }\n    }\n\n    handleCheckboxClick = (e) => {\n        const label = e.currentTarget;\n        let input;\n        if (label && (input = label.querySelector('input')) && input) {\n            const labels = this.state.labels;\n            const idx = labels.indexOf(input.value);\n            if (input.checked) {\n                if (idx === -1) {\n                    labels.push(input.value);\n                    this.setState({\n                        labels: [...labels],\n                    });\n                }\n            } else {\n                if (idx !== -1) {\n                    labels.splice(idx, 1);\n                    this.setState({\n                        labels: [...labels],\n                    });\n                }\n            }\n        }\n    }\n\n    handleSubmit = (e) => {\n        e.preventDefault();\n        e.stopPropagation();\n        const { dispatch } = this.props;\n        const number = this.number;\n        if (this.title && this.content) {\n            const params = {\n                title: this.title.value,\n                body: this.content,\n                labels: this.labels,\n                milestone: this.milestone,\n                callback: (url) => {\n                    this.props.history.push(url)\n                }\n            };\n            if (number) {\n                dispatch.repository.editIssue({\n                    ...params,\n                    number,\n                })\n            } else {\n                dispatch.repository.createIssue(params)\n            }\n        }\n    }\n\n    render() {\n        const { labelsList, milestonesList, loading } = this.props;\n        const number = this.number;\n        return (\n            <Loading loading={loading}>\n        <div className={styles.editorContainer}>\n            <header className={styles.header}>\n                <h2>文章编辑页</h2>\n            </header>\n            <main>\n                <form>\n                    <label className={styles.fileds} htmlFor=\"title\">标题：\n                        <input defaultValue={this.state.title} ref={input => this.title = input} type=\"text\" id=\"title\" />\n                    </label>\n                    <label className={classNames(styles.fileds, styles.editorContent)} htmlFor=\"editor\">内容：\n                        <MarkdownPreviewer\n                            defaultValue={this.state.content}\n                            onChange={this.handleChange}\n                        />\n                    </label>\n                    <label className={styles.fileds} htmlFor=\"milestone\">\n                        分类：\n                        {milestonesList.map(milestone => {\n                            return (\n                                <label\n                                    key={milestone.id}\n                                    className={styles.checkLabel}\n                                    onClick={this.handleRadioClick}\n                                >\n                                    <input\n                                        type=\"radio\"\n                                        name=\"categories\"\n                                        value={milestone.number}\n                                        checked={this.state.milestone === milestone.id}\n                                    />\n                                    {milestone.title}\n                                </label>\n                            );\n                        })}\n                    </label>\n                    <label className={styles.fileds} htmlFor=\"labels\">\n                        标签：\n                        {labelsList.map(label => {\n                            return (\n                                <label\n                                    key={label.id}\n                                    className={styles.checkLabel}\n                                    onClick={this.handleCheckboxClick}\n                                >\n                                    <input\n                                        type=\"checkbox\"\n                                        value={label.name}\n                                        name={`label-${label.name}`}\n                                        checked={this.state.labels.indexOf(label.name) !== -1}\n                                    />\n                                    {label.name}\n                                </label>\n                            );\n                        })}\n                    </label>\n                    <input\n                        type=\"submit\"\n                        value={number ? \"修改\" : \"创建\"}\n                        className={styles.submitButton}\n                        onClick={this.handleSubmit}\n                    />\n                </form>\n            </main>\n            <footer>\n                <p>Copyright ©{new Date().getFullYear()} Roy Zhi</p>\n            </footer>\n        </div>\n        </Loading>\n        );\n    }\n}\n\nconst mapState = createSelector(\n    [\n        store => store.repository.result,\n        store => store.repository.loading,\n        store => store.entities.repositories,\n        store => store.entities.labels,\n        store => store.entities.milestones,\n        store => store.entities.issues,\n    ],\n    (\n        result,\n        loading,\n        repositoriesMap,\n        labelsMap,\n        milestonesMap,\n        issuesMap\n    ) => {\n        let labelsList = [], milestonesList = [], currentIssue;\n        const currentRepository = repositoriesMap[result];\n        if (\n            currentRepository &&\n            currentRepository.labels &&\n            currentRepository.labels.nodes &&\n            currentRepository.milestones &&\n            currentRepository.milestones.nodes\n        ) {\n            labelsList = currentRepository.labels.nodes.map(id => labelsMap[id]);\n            milestonesList = currentRepository.milestones.nodes.map(id => milestonesMap[id]);\n            const currentIssueId = currentRepository.issue;\n            if (currentIssueId) {\n                currentIssue = issuesMap[currentIssueId]\n            }\n        }\n        return {\n            loading,\n            labelsMap,\n            labelsList,\n            milestonesMap,\n            milestonesList,\n            currentIssue,\n        }\n    }\n)\n\nexport default connect(mapState)(withRouter(EditorPage));\n"],"sourceRoot":""}