{"version":3,"sources":["commons/schemas.js","utils/getToken.js","services/github.js","components/Loading/style.module.scss","utils/persist.js","models/repository.js","models/entities.js","models/user.js","models/index.js","commons/const.js","services/serviceWorker.js","pages/App.js","index.js","commons/config.js","components/Loading/index.js","utils/urlSearchParser.js"],"names":["milestone","schema","Entity","label","comment","issue","labels","nodes","comments","repository","issues","milestones","getToken","secret","atob","config","token","regexp","RegExp","concat","owner","repo","replace","initIndex","_initIndex","apply","this","arguments","_callee","regenerator_default","a","wrap","_context","prev","next","abrupt","axios","post","query","headers","Authorization","then","response","normalize","data","stop","getSingleIssue","_x","_getSingleIssue","_callee2","number","_context2","getLoginAuthLink","scope","redirect_uri","encodeURIComponent","window","location","href","client_id","queryString","Object","keys","map","key","join","userAuth","_x2","_userAuth","_callee3","code","_context3","client_secret","Accept","getViewer","_x3","_getViewer","_callee4","_context4","viewer","addComment","_x4","_addComment","_callee5","_ref","id","content","_context5","commentEdge","node","commentSchema","initEditor","_x5","_x6","_initEditor","_callee6","hasLabelsAndMilestones","_context6","undefined","repositoryObj","searchIssues","_x7","_searchIssues","_callee7","params","_context7","length","trim","search","norNodes","issueSchema","objectSpread","result","entities","createIssue","_x8","_createIssue","_callee8","_context8","title","body","node_id","editIssue","_x9","_editIssue","_callee9","_context9","patch","getAuthUser","_x10","_getAuthUser","_callee10","_context10","get","auth","username","password","user","camelize","module","exports","loadingContainer","saveState","name","state","setTimeout","localStorage","setItem","JSON","stringify","getState","defaultState","getItem","parse","object","require","NAME","loading","searchParams","reducers","update","payload","newState","merge","effects","dispatch","asyncToGenerator","mark","_","rootState","githubServices","sent","closeCurrentIssue","_closeCurrentIssue","currentRepository","newEntities","repositories","defineProperty","hasCurrentIssueBody","pageInfo","totalCount","issueCount","callback","_x11","_x12","_x13","_x14","models","accessToken","tokenType","email","login","url","avatarUrl","getAuthToken","_getAuthToken","userCache","_JSON$parse","access_token","token_type","oauth","_user","getSearchCode","_addComment2","issuesMap","commentIssue","push","_getAuthUser2","isLocalhost","Boolean","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","routerConfig","path","exact","component","lazy","Promise","all","__webpack_require__","e","bind","App","react_default","createElement","HashRouter","react","fallback","Loading","Switch","route","Route","d","__webpack_exports__","store","init","ReactDOM","render","es","pages_App","document","getElementById","URL","process","origin","addEventListener","fetch","contentType","status","indexOf","ready","unregister","reload","checkValidServiceWorker","react__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_0___default","n","_style_module_scss__WEBPACK_IMPORTED_MODULE_1__","_style_module_scss__WEBPACK_IMPORTED_MODULE_1___default","children","_ref$loading","className","styles","URLSearchParams","delete","toString","pathname","hash","history","pushState","isPWA"],"mappings":"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","file":"static/js/main.ca1d52d0.chunk.js","sourcesContent":["import { schema } from 'normalizr';\n\nexport const milestone = new schema.Entity('milestones');\nexport const label = new schema.Entity('labels');\nexport const comment = new schema.Entity('comments');\nexport const issue = new schema.Entity('issues', {\n    milestone: milestone,\n    labels: {\n        nodes: [label]\n    },\n    comments: {\n        nodes:[comment]\n    },\n});\n\nexport const repository = new schema.Entity('repositories', {\n    issue,\n    issues: {\n        nodes: [issue]\n    },\n    labels: {\n        nodes: [label]\n    },\n    milestones: {\n        nodes: [milestone]\n    },\n})","import config from '../commons/config';\n\nexport default function getToken() {\n    const secret = atob(config.token);\n    const regexp = new RegExp(`(\\\\+${config.owner}\\\\+|\\\\+${config.repo}\\\\+)`,'g');\n    const token = secret.replace(regexp,'');\n    return token;\n}","import axios from 'axios';\nimport { normalize } from 'normalizr';\nimport camelize from 'camelize';\nimport config from '../commons/config';\nimport { repository, comment as commentSchema, issue as issueSchema } from '../commons/schemas';\nimport getToken from '../utils/getToken';\n\nexport async function initIndex() {\n    return axios.post(\n        'https://api.github.com/graphql',\n        {\n            query: `query { \n                repository(owner: \"${config.owner}\", name: \"${config.repo}\") {\n                    id,\n                    labels(first: 100) {\n                        nodes {\n                            id,\n                            name,\n                            color,\n                        } \n                    },\n                    milestones(first:100) {\n                        nodes {\n                            id,\n                            number,\n                            state,\n                            title,\n                        }\n                    },\n                    issues(last:20, states:OPEN, orderBy: {direction: DESC, field: UPDATED_AT}) {\n                        pageInfo {\n                            endCursor,\n                            startCursor,\n                            hasNextPage,\n                            hasPreviousPage\n                        },\n                        totalCount,\n                        nodes {\n                            id,\n                            title,\n                            number,\n                            createdAt,\n                            milestone {\n                                id\n                            },\n                            labels(first:100) {\n                                nodes {\n                                    id,\n                                }\n                            }\n                        }\n                    }\n                }\n            }`\n        },\n        {\n            headers: {\n                Authorization: `bearer ${getToken()}`\n            },\n        }\n    ).then(response => {\n        return normalize(response.data.data.repository, repository);\n    });\n}\n\nexport async function getSingleIssue(number) {\n    return axios.post(\n        'https://api.github.com/graphql',\n        {\n            query: `query { \n                repository(owner: \"${config.owner}\", name: \"${config.repo}\") {\n                    id,\n                    issue(number: ${number}) {\n                        id,\n                        title,\n                        number,\n                        bodyHTML,\n                        createdAt,\n                        milestone {\n                            id,\n                            number,\n                            state,\n                            title,\n                        },\n                        labels(first:100) {\n                            nodes {\n                                id,\n                                name,\n                                color,\n                            }\n                        },\n                        comments(last: 20) {\n                            nodes {\n                                id,\n                                author {\n                                    avatarUrl,\n                                    login,\n                                    url,\n                                },\n                                bodyHTML,\n                                createdAt,\n                            }\n                        }\n                    }\n                }\n            }`\n        },\n        {\n            headers: {\n                Authorization: `bearer ${getToken()}`\n            },\n        }\n    ).then(response => {\n        return normalize(response.data.data.repository, repository);\n    })\n}\n\nexport function getLoginAuthLink() {\n    const query = {\n        scope: 'public_repo, user',\n        redirect_uri: encodeURIComponent(window.location.href),\n        client_id: config.client_id,\n    }\n    const queryString = Object.keys(query).map(key => `${key}=${query[key]}`).join('&');\n    return `https://github.com/login/oauth/authorize?${queryString}`\n}\n\nexport async function userAuth(code) {\n    const proxyUrl = 'https://cors-anywhere.herokuapp.com/https://github.com/login/oauth/access_token'\n    return axios.post(proxyUrl, {\n        code,\n        client_id: config.client_id,\n        client_secret: config.client_secret,\n    },\n    {\n        headers: {\n            Accept: 'application/json'\n        }\n    }).then(response => {\n        return response && response.data;\n    })\n}\n\nexport async function getViewer(token) {\n    return axios.post('https://api.github.com/graphql', {\n        query: `query { \n            viewer {\n                email,\n                id,\n                login,\n                name,\n                url,\n                avatarUrl, \n            }\n        }`\n        },\n        {\n            headers: {\n                Authorization: token,\n            }\n        }\n    ).then(response => {\n        return response && response.data && response.data.data && response.data.data.viewer;\n    });\n}\n\nexport async function addComment({id, content, token}) {\n    return axios.post(\n        'https://api.github.com/graphql',\n        {\n            query: `mutation {\n                addComment(input:{subjectId: \"${id}\", body: \"${content}\"}) {\n                    commentEdge {\n                        node {\n                            id,\n                            bodyHTML,\n                            createdAt,\n                            author {\n                                avatarUrl,\n                                login,\n                                url,\n                            },\n                        }\n                    }\n                }\n            }`\n        },\n        {\n            headers: {\n                Authorization: token,\n            }\n        }\n    ).then(response => {\n        const comment = response && response.data && response.data.data\n            && response.data.data.addComment.commentEdge.node;\n        if (comment) {\n            return normalize(comment, commentSchema)\n        }\n    });\n}\n\nexport async function initEditor(number, hasLabelsAndMilestones) {\n    return axios.post(\n        'https://api.github.com/graphql',\n        {\n            query: `query {\n                repository(owner: \"${config.owner}\", name: \"${config.repo}\") {\n                    id\n                    ${hasLabelsAndMilestones ? '' :\n                        `labels(first: 100) {\n                            nodes {\n                                id\n                                name\n                                color\n                            }\n                        }\n                        milestones(first: 100) {\n                            nodes {\n                                id\n                                number\n                                state\n                                title\n                            }\n                        }`\n                    }\n                    ${number !== undefined ? \n                    `issue(number: ${number}) {\n                        id\n                        title\n                        number\n                        body\n                        milestone {\n                            id\n                        }\n                        labels(first: 100) {\n                            nodes {\n                                id\n                            }\n                        }\n                    }` : ''}\n                    \n                }\n            }`\n        },\n        {\n            headers: {\n                Authorization: `bearer ${getToken()}`\n            },\n        }\n    ).then(response => {\n        const repositoryObj = response && response.data\n            && response.data.data && response.data.data.repository;\n        if (repositoryObj) {\n            return normalize(repositoryObj, repository);\n        } else {\n            return false;\n        }\n    })\n}\n\nexport async function searchIssues(params) {\n    let queryString = `repo:${config.owner}/${config.repo} `;\n    if (params && params.milestone) {\n        queryString += `milestone:${params.milestone} `;\n    }\n    if (params && params.labels && params.labels.length) {\n        queryString += params.labels.map(label => `label:${label} `).join('');\n    }\n    if (params && params.query) {\n        queryString += `${params.query} `\n    }\n    return axios.post(\n        'https://api.github.com/graphql',\n        {\n            query: `query {\n                search(type: ISSUE, last: 20, query: \"${queryString.trim()}\") {\n                    issueCount\n                    pageInfo {\n                        endCursor\n                        startCursor\n                        hasNextPage\n                        hasPreviousPage\n                    }\n                    nodes {\n                        ... on Issue {\n                            id,\n                            title,\n                            number,\n                            createdAt,\n                            milestone {\n                                id\n                            },\n                            labels(first:100) {\n                                nodes {\n                                    id,\n                                }\n                            }\n                        }\n                    }\n                }\n            }`,\n        },\n        {\n            headers: {\n                Authorization: `bearer ${getToken()}`\n            },\n        }\n    ).then(response => {\n        const search = response && response.data && response.data.data && response.data.data.search;\n        if (search) {\n            const norNodes = normalize(search.nodes, [issueSchema]);\n            return {\n                ...search,\n                nodes: norNodes.result,\n                entities: norNodes.entities,\n            }\n        } else {\n            return false;\n        }\n    });\n}\n\n\nexport async function createIssue(params) {\n    return axios.post(`https://api.github.com/repos/${config.owner}/${config.repo}/issues`,\n    {\n        title: params.title,\n        body: params.body,\n        milestone: params.milestone,\n        labels: params.labels,\n    },\n    {\n        headers: {\n            Authorization: `token ${getToken()}`\n        },\n    }).then(response => {\n        const issue = response && response.data\n        if (issue) {\n            issue.id = issue.node_id;\n            issue.labels = {\n                nodes: issue.labels.map(label => {\n                    label.id = label.node_id;\n                    return label;\n                })\n            };\n            issue.milestone.id = issue.milestone.node_id;\n            issue.comments = {\n                nodes: []\n            };\n            return normalize(issue, issueSchema);\n        }\n    })\n}\n\nexport async function editIssue(params) {\n    return axios.patch(\n        `https://api.github.com/repos/${config.owner}/${config.repo}/issues/${params.number}`,\n        {\n            title: params.title,\n            body: params.body,\n            milestone: params.milestone,\n            labels: params.labels\n        },\n        {\n            headers: {\n                Authorization: `token ${getToken()}`\n            },\n        }\n    ).then(response => {\n        const issue = response && response.data\n        if (issue) {\n            issue.id = issue.node_id;\n            issue.labels = {\n                nodes: issue.labels.map(label => {\n                    label.id = label.node_id;\n                    return label;\n                })\n            };\n            issue.milestone.id = issue.milestone.node_id;\n            issue.comments = {\n                nodes: []\n            };\n            return normalize(issue, issueSchema);\n        }\n    })\n}\n\nexport async function getAuthUser(params) {\n    return axios.get('https://api.github.com/user', {\n        auth: {\n            username: params.username,\n            password: params.password\n        },\n    }).then(response => {\n        const user = response && response.data;\n        if (user) {\n            user.id = user.node_id;\n            return camelize(user);\n        }\n    })\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"loadingContainer\":\"style_loadingContainer__3Pquw\"};","export function saveState(name, state) {\r\n    setTimeout(() => {\r\n        \r\n        localStorage.setItem(name, JSON.stringify(state));\r\n    }, 0)\r\n}\r\n\r\nexport function getState(name, defaultState) {\r\n    const state = localStorage.getItem(name);\r\n    if (state) {\r\n        return JSON.parse(state);\r\n    }\r\n    return defaultState;\r\n}","import * as githubServices from '../services/github'\nimport { saveState, getState } from '../utils/persist';\n\nconst object = require('lodash/fp/object');\nconst DEFAULT_STATE = {\n    result: '',\n    loading: true,\n    searchParams: {\n        milestone: '*',\n        labels: [],\n        query: '', \n    }\n};\nconst NAME = 'repository';\n\nexport default {\n    name: NAME,\n    state: getState(NAME, DEFAULT_STATE),\n    reducers: {\n        update(state, payload) {\n            const newState = object.merge(state, payload);\n            saveState(NAME, newState);\n            return newState;\n        }\n    },\n    effects: (dispatch) => ({\n        async initIndex(_, rootState) {\n            if (!rootState.repository.loading) {\n                await dispatch.repository.update({\n                    loading: true,\n                });\n            }\n            const response = await githubServices.initIndex()\n            if (response) {\n                await dispatch.entities.update(response.entities);\n                await dispatch.repository.update({\n                    result: response.result,\n                    loading: false,\n                });\n            }\n        },\n        async getSingleIssue(number, rootState) {\n            if (!rootState.repository.loading) {\n                await dispatch.repository.update({\n                    loading: true,\n                });\n            }\n            const response = await githubServices.getSingleIssue(number)\n            if (response) {\n                await dispatch.entities.update(response.entities);\n                await dispatch.repository.update({\n                    result: response.result,\n                    loading: false,\n                })\n            }\n        },\n        async closeCurrentIssue(_, rootState) {\n            const result = rootState.repository.result;\n            const currentRepository = rootState.entities.repositories[result];\n            if (currentRepository) {\n                currentRepository.issue = undefined;\n                const newEntities = {\n                    repositories: {\n                        [result]: currentRepository\n                    }\n                };\n                await dispatch.entities.update(newEntities);\n            }\n        },\n        async initEditor(number, rootState) {\n            const result = rootState.repository.result;\n            const currentRepository = rootState.entities.repositories[result];\n            const hasLabelsAndMilestones = currentRepository &&\n                currentRepository.labels &&\n                currentRepository.labels.nodes.length &&\n                currentRepository.milestones &&\n                currentRepository.milestones.nodes.length;\n            const hasCurrentIssueBody = !number || (\n                currentRepository &&\n                currentRepository.issue &&\n                rootState.entities.issues[currentRepository.issue] &&\n                rootState.entities.issues[currentRepository.issue].body);\n            if (hasLabelsAndMilestones && hasCurrentIssueBody) {\n                return;\n            }\n            if (!rootState.repository.loading) {\n                await dispatch.repository.update({\n                    loading: true,\n                });\n            }\n            const response = await githubServices.initEditor(number, hasLabelsAndMilestones)\n            if (response) {\n                await dispatch.entities.update(response.entities);\n                await dispatch.repository.update({\n                    result: response.result,\n                    loading: false,\n                });\n            }\n        },\n        async searchIssues(payload, rootState) {\n            const { milestone, labels, query } = payload;\n            await dispatch.repository.update({\n                searchParams: {\n                    milestone,\n                    labels,\n                    query,\n                }\n            })\n            const response = await githubServices.searchIssues({\n                milestone,\n                labels,\n                query,\n            });\n            if (response) {\n                const result = rootState.repository.result;\n                const currentRepository = rootState.entities.repositories[result];\n                if (currentRepository) {\n                    currentRepository.issues = {\n                        pageInfo: response.pageInfo,\n                        totalCount: response.issueCount,\n                        nodes: response.nodes,\n                    }\n                    dispatch.entities.update({\n                        repositories: {\n                            [result]: currentRepository,\n                        },\n                        ...response.entities,\n                    })\n                }\n            }\n        },\n        async createIssue(payload, rootState) {\n            const response =  await githubServices.createIssue(payload);\n            if (response && response.result) {\n                const currentRepository = rootState.entities.repositories[rootState.repository.result];\n                currentRepository.issue = response.result;\n                await dispatch.entities.update({\n                    ...response.entities,\n                    repositories: {\n                        [rootState.repository.result]: currentRepository,\n                    }\n                });\n                typeof payload.callback === 'function' && payload.callback(`/article/${response.entities.issues[response.result].number}`)\n            }\n        },\n        async editIssue(payload, rootState) {\n            const response =  await githubServices.editIssue(payload);\n            if (response && response.result) {\n                const currentRepository = rootState.entities.repositories[rootState.repository.result];\n                currentRepository.issue = response.result;\n                await dispatch.entities.update({\n                    ...response.entities,\n                    repositories: {\n                        [rootState.repository.result]: currentRepository,\n                    }\n                });\n                typeof payload.callback === 'function' && payload.callback(`/article/${response.entities.issues[response.result].number}`)\n            }\n        },\n    })\n}","import { saveState, getState } from '../utils/persist';\nconst object = require('lodash/fp/object');\nconst DEFAULT_STATE = {\n    repositories: {},\n    issues: {},\n    labels: {},\n    milestones: {},\n    comments: {},\n};\nconst NAME = 'entities';\n\nexport default {\n    name: 'entities',\n    state: getState(NAME, DEFAULT_STATE),\n    reducers: {\n        update(state, payload) {\n            const newState = object.merge(state, payload);\n            saveState(NAME, newState);\n            return newState\n        },\n    }\n}","import { userAuth, getViewer, addComment, getAuthUser } from '../services/github';\nimport { getSearchCode } from '../utils/urlSearchParser';\nimport { USER_AUTH } from '../commons/const';\nimport { saveState, getState } from '../utils/persist';\n\nconst object = require('lodash/fp/object');\nconst DEFAULT_STATE = {\n    loading: false,\n    auth: false,\n    accessToken: '',\n    scope: '',\n    tokenType: '',\n    viewer: {\n        email: '',\n        id: '',\n        login: '',\n        name: '',\n        url: '',\n        avatarUrl: ''\n    }\n};\nconst NAME = 'user';\n\nexport default {\n    name:NAME,\n    state: getState(NAME, DEFAULT_STATE),\n    reducers: {\n        update(state, payload) {\n            const newState = object.merge(state, payload);\n            saveState(NAME, newState);\n            return newState;\n        },\n    },\n    effects: (dispatch) => ({\n        async getAuthToken(_, rootState) {\n            const code = getSearchCode();\n            const userCache = localStorage.getItem(USER_AUTH);\n            if (!code && !userCache) {\n                return;\n            }\n\n            if (!rootState.user.loading) {\n                await dispatch.user.update({\n                    loading: true,\n                })\n            }\n\n            if (userCache ) {\n                const { \n                    access_token,\n                    token_type,\n                    scope,\n                } = JSON.parse(userCache);\n                const user = await getViewer(`${token_type} ${access_token}`)\n                if (user) {\n                    await dispatch.user.update({\n                        accessToken: access_token,\n                        tokenType: token_type,\n                        scope: scope,\n                        auth: true,\n                        loading: false,\n                        viewer: user,\n                    })\n                }\n            } else if (code) {\n                const oauth = await userAuth(code);\n                if (oauth && oauth.access_token) {\n                    localStorage.setItem(USER_AUTH, JSON.stringify(oauth));\n                    const user = await getViewer(`${oauth.token_type} ${oauth.access_token}`)\n                    if (user) {\n                        await dispatch.user.update({\n                            accessToken: oauth.access_token,\n                            tokenType: oauth.token_type,\n                            scope: oauth.scope,\n                            auth: true,\n                            loading: false,\n                            viewer: user,\n                        })\n                    }\n                }\n            }\n\n            await dispatch.user.update({\n                loading: false,\n            })\n        },\n        async addComment({id, content, callback}, rootState) {\n            if (!rootState.user.accessToken) {\n                return;\n            }\n\n            const token = `${rootState.user.tokenType} ${rootState.user.accessToken}`;\n            const comment = await addComment({id, content, token});\n            if (comment) {\n                const issuesMap = rootState.entities.issues;\n                const commentIssue = issuesMap[id];\n                commentIssue.comments.nodes.push(comment.result)\n                await dispatch.entities.update({\n                    issues: {\n                        [id]: commentIssue,\n                    },\n                    ...comment.entities,\n                })\n                typeof callback === 'function' && callback();\n            }\n        },\n        async getAuthUser(params, rootState) {\n            if (params && params.username && params.password) {\n                if (!rootState.user.loading) {\n                    await dispatch.user.update({\n                        loading: true,\n                    });\n                }\n                const user = await getAuthUser(params);\n                if (user) {\n                    await dispatch.user.update({\n                        auth: true,\n                        loading: false,\n                        viewer: user,\n                        username: params.username,\n                        password: params.password,\n                    })\n                } else {\n                    await dispatch.user.update({\n                        loading: false,\n                    });\n                }\n            }\n        }\n    })\n}","import repository from './repository';\nimport entities from './entities';\nimport user from './user';\n\nexport default {\n    user,\n    entities,\n    repository,\n}","export const USER_AUTH = 'GITHUB_USER_AUTH';","// 作用：注册service worker服务，实现pwa应用\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React, { Suspense, lazy } from 'react';\nimport { HashRouter as Router, Route, Switch } from 'react-router-dom';\nimport Loading from '../components/Loading'\n\nconst routerConfig = [\n    {\n        path: '/',\n        exact: true,\n        component: lazy(() => import('./Index')),\n    },\n    {\n        path: '/editor',\n        exact: true,\n        component: lazy(() => import('./Editor')),\n    },\n    {\n        path: '/editor/:number',\n        exact: true,\n        component: lazy(() => import('./Editor')),\n    },\n    {\n        path: '/article/:number',\n        exact: true,\n        component: lazy(() => import('./Article')),\n    }\n];\n\nconst App = () => {\n    return (\n        <Router>\n            <Suspense fallback={<Loading loading={true} />}>\n                <Switch>\n                    {routerConfig.map(route =>\n                        (<Route\n                            key={route.path}\n                            path={route.path}\n                            exact={route.exact}\n                            component={() => <route.component />}\n                        />)\n                    )}\n                </Switch>\n            </Suspense>\n        </Router>\n    );\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { init } from '@rematch/core';\nimport { Provider } from 'react-redux';\nimport models from './models/index';\nimport * as serviceWorker from './services/serviceWorker';\nimport App from './pages/App';\nimport './styles/index.scss';\n\nexport const store = init({\n    models,\n}) \n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>,\n    document.getElementById('root')\n);\n\nserviceWorker.register();\n","\r\nexport default {\r\n    owner: 'zhirui1994',\r\n    repo: 'zhirui1994.github.io',\r\n    token: 'MSt6aGlydWkxOTk0KzBhOGZmMjAwNWM3M2NmNmM1YzEzYWQyZmRkZjhjN2E4MDU0NzdlK3poaXJ1aTE5OTQuZ2l0aHViLmlvKzg=',\r\n    client_id: '635ab95d562259d5e20a',\r\n    client_secret: 'e795e7e409ce731cf304facd92aecd305c774731',\r\n}","import React, { Fragment } from 'react';\nimport styles from './style.module.scss';\n\nconst Loading = ({ children, loading=true }) => {\n    if (loading) {\n        return (\n            <div className={styles.loadingContainer} >\n                <i className=\"fa fa-spinner fa-pulse\"></i>\n            </div>\n        );\n    } else {\n        return (\n            <Fragment>\n                {children}\n            </Fragment>\n        );\n    }\n}\n\nexport default Loading;\n","export function getSearchCode() {\n    const searchParams = new URLSearchParams(window.location.search);\n    const code = searchParams.get('code');\n    if (code) {\n        searchParams.delete('code');\n        const search = searchParams.toString();\n        const url = `${window.location.pathname}${search ? `?${search}` : ''}${window.location.hash}`;\n        window.history.pushState(null, null, url)\n        return code;\n    } else {\n        return '';\n    }\n}\n\nexport function isPWA() {\n    return window.location.href.indexOf('from=pwa') !== -1;\n}"],"sourceRoot":""}