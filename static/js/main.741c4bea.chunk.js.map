{"version":3,"sources":["commons/config.js","commons/schemas.js","utils/getToken.js","services/github.js","components/Loading/style.module.scss","models/repository.js","models/entities.js","utils/urlSearchParser.js","commons/const.js","models/user.js","models/index.js","services/serviceWorker.js","pages/App.js","index.js","components/Loading/index.js"],"names":["config","owner","repo","token","client_id","client_secret","milestone","schema","Entity","label","comment","issue","labels","nodes","comments","repository","issues","milestones","getToken","secret","atob","regexp","RegExp","concat","replace","initIndex","_initIndex","apply","this","arguments","_callee","regenerator_default","a","wrap","_context","prev","next","abrupt","axios","post","query","headers","Authorization","then","response","normalize","data","stop","getSingleIssue","_x","_getSingleIssue","_callee2","number","_context2","getLoginAuthLink","scope","redirect_uri","encodeURIComponent","queryString","Object","keys","map","key","join","userAuth","_x2","_userAuth","_callee3","code","_context3","Accept","getViewer","_x3","_getViewer","_callee4","_context4","viewer","addComment","_x4","_addComment","_callee5","_ref","id","content","_context5","commentEdge","node","commentSchema","initEditor","_x5","_initEditor","_callee6","_context6","undefined","repositoryObj","searchIssues","_x6","_searchIssues","_callee7","params","_context7","length","trim","search","norNodes","issueSchema","objectSpread","result","entities","createIssue","_x7","_createIssue","_callee8","_context8","title","body","node_id","editIssue","_x8","_editIssue","_callee9","_context9","patch","module","exports","loadingContainer","object","require","name","state","loading","searchParams","reducers","update","payload","merge","effects","dispatch","asyncToGenerator","mark","_","rootState","githubServices","sent","closeCurrentIssue","_closeCurrentIssue","currentRepository","newEntities","repositories","defineProperty","pageInfo","totalCount","issueCount","_x9","_x10","_x11","_x12","callback","_x13","_x14","getSearchCode","URLSearchParams","window","location","get","delete","toString","url","pathname","hash","history","pushState","models","user","auth","accessToken","tokenType","email","login","avatarUrl","getAuthToken","_getAuthToken","userCache","_JSON$parse","access_token","token_type","oauth","_user","localStorage","getItem","JSON","parse","setItem","stringify","_addComment2","issuesMap","commentIssue","push","Boolean","hostname","match","routerConfig","path","exact","component","lazy","Promise","all","__webpack_require__","e","bind","App","react_default","createElement","HashRouter","react","fallback","Loading","Switch","route","Route","d","__webpack_exports__","store","init","ReactDOM","render","es","pages_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister","react__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_0___default","n","_style_module_scss__WEBPACK_IMPORTED_MODULE_1__","_style_module_scss__WEBPACK_IMPORTED_MODULE_1___default","children","_ref$loading","className","styles"],"mappings":"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","file":"static/js/main.741c4bea.chunk.js","sourcesContent":["export default {\n    owner: 'zhirui1994',\n    repo: 'zhirui1994.github.io',\n    token: \"MSt6aGlydWkxOTk0KzBhOGZmMjAwNWM3M2NmNmM1YzEzYWQyZmRkZjhjN2E4MDU0NzdlK3poaXJ1aTE5OTQuZ2l0aHViLmlvKzg=\",\n    client_id: '635ab95d562259d5e20a',\n    client_secret: 'e795e7e409ce731cf304facd92aecd305c774731',\n}","import { schema } from 'normalizr';\n\nexport const milestone = new schema.Entity('milestones');\nexport const label = new schema.Entity('labels');\nexport const comment = new schema.Entity('comments');\nexport const issue = new schema.Entity('issues', {\n    milestone: milestone,\n    labels: {\n        nodes: [label]\n    },\n    comments: {\n        nodes:[comment]\n    },\n});\n\nexport const repository = new schema.Entity('repositories', {\n    issue,\n    issues: {\n        nodes: [issue]\n    },\n    labels: {\n        nodes: [label]\n    },\n    milestones: {\n        nodes: [milestone]\n    },\n})","import config from '../commons/config';\n\nexport default function getToken() {\n    const secret = atob(config.token);\n    const regexp = new RegExp(`(\\\\+${config.owner}\\\\+|\\\\+${config.repo}\\\\+)`,'g');\n    const token = secret.replace(regexp,'');\n    return token;\n}","import axios from 'axios';\nimport { normalize } from 'normalizr';\nimport config from '../commons/config';\nimport { repository, comment as commentSchema, issue as issueSchema } from '../commons/schemas';\nimport getToken from '../utils/getToken';\n\nexport async function initIndex() {\n    return axios.post(\n        'https://api.github.com/graphql',\n        {\n            query: `query { \n                repository(owner: \"${config.owner}\", name: \"${config.repo}\") {\n                    id,\n                    labels(first: 100) {\n                        nodes {\n                            id,\n                            name,\n                            color,\n                        } \n                    },\n                    milestones(first:100) {\n                        nodes {\n                            id,\n                            number,\n                            state,\n                            title,\n                        }\n                    },\n                    issues(last:20, states:OPEN, orderBy: {direction: DESC, field: UPDATED_AT}) {\n                        pageInfo {\n                            endCursor,\n                            startCursor,\n                            hasNextPage,\n                            hasPreviousPage\n                        },\n                        totalCount,\n                        nodes {\n                            id,\n                            title,\n                            number,\n                            createdAt,\n                            milestone {\n                                id\n                            },\n                            labels(first:100) {\n                                nodes {\n                                    id,\n                                }\n                            }\n                        }\n                    }\n                }\n            }`\n        },\n        {\n            headers: {\n                Authorization: `bearer ${getToken()}`\n            },\n        }\n    ).then(response => {\n        return normalize(response.data.data.repository, repository);\n    });\n}\n\nexport async function getSingleIssue(number) {\n    return axios.post(\n        'https://api.github.com/graphql',\n        {\n            query: `query { \n                repository(owner: \"${config.owner}\", name: \"${config.repo}\") {\n                    id,\n                    issue(number: ${number}) {\n                        id,\n                        title,\n                        number,\n                        bodyHTML,\n                        createdAt,\n                        milestone {\n                            id,\n                            number,\n                            state,\n                            title,\n                        },\n                        labels(first:100) {\n                            nodes {\n                                id,\n                                name,\n                                color,\n                            }\n                        },\n                        comments(last: 20) {\n                            nodes {\n                                id,\n                                author {\n                                    avatarUrl,\n                                    login,\n                                    url,\n                                },\n                                bodyHTML,\n                                createdAt,\n                            }\n                        }\n                    }\n                }\n            }`\n        },\n        {\n            headers: {\n                Authorization: `bearer ${getToken()}`\n            },\n        }\n    ).then(response => {\n        return normalize(response.data.data.repository, repository);\n    })\n}\n\nexport function getLoginAuthLink() {\n    const query = {\n        scope: 'public_repo, user',\n        redirect_uri: encodeURIComponent(`https://zhirui1994.github.io/#/article/1`),\n        client_id: config.client_id,\n    }\n    const queryString = Object.keys(query).map(key => `${key}=${query[key]}`).join('&');\n    return `https://github.com/login/oauth/authorize?${queryString}`\n}\n\nexport async function userAuth(code) {\n    const proxyUrl = 'https://cors-anywhere.herokuapp.com/https://github.com/login/oauth/access_token'\n    return axios.post(proxyUrl, {\n        code,\n        client_id: config.client_id,\n        client_secret: config.client_secret,\n    },\n    {\n        headers: {\n            Accept: 'application/json'\n        }\n    }).then(response => {\n        return response && response.data;\n    })\n}\n\nexport async function getViewer(token) {\n    return axios.post('https://api.github.com/graphql', {\n        query: `query { \n            viewer {\n                email,\n                id,\n                login,\n                name,\n                url,\n                avatarUrl, \n            }\n        }`\n        },\n        {\n            headers: {\n                Authorization: token,\n            }\n        }\n    ).then(response => {\n        return response && response.data && response.data.data && response.data.data.viewer;\n    });\n}\n\nexport async function addComment({id, content, token}) {\n    return axios.post(\n        'https://api.github.com/graphql',\n        {\n            query: `mutation {\n                addComment(input:{subjectId: \"${id}\", body: \"${content}\"}) {\n                    commentEdge {\n                        node {\n                            id,\n                            bodyHTML,\n                            createdAt,\n                            author {\n                                avatarUrl,\n                                login,\n                                url,\n                            },\n                        }\n                    }\n                }\n            }`\n        },\n        {\n            headers: {\n                Authorization: token,\n            }\n        }\n    ).then(response => {\n        const comment = response && response.data && response.data.data\n            && response.data.data.addComment.commentEdge.node;\n        if (comment) {\n            return normalize(comment, commentSchema)\n        }\n    });\n}\n\nexport async function initEditor(number) {\n    return axios.post(\n        'https://api.github.com/graphql',\n        {\n            query: `query {\n                repository(owner: \"${config.owner}\", name: \"${config.repo}\") {\n                    id\n                    labels(first: 100) {\n                        nodes {\n                            id\n                            name\n                            color\n                        }\n                    }\n                    milestones(first: 100) {\n                        nodes {\n                            id\n                            number\n                            state\n                            title\n                        }\n                    }\n                    ${number !== undefined ? \n                    `issue(number: ${number}) {\n                        id\n                        title\n                        number\n                        body\n                        milestone {\n                            id\n                        }\n                        labels(first: 100) {\n                            nodes {\n                                id\n                            }\n                        }\n                    }` : ''}\n                    \n                }\n            }`\n        },\n        {\n            headers: {\n                Authorization: `bearer ${getToken()}`\n            },\n        }\n    ).then(response => {\n        const repositoryObj = response && response.data\n            && response.data.data && response.data.data.repository;\n        if (repositoryObj) {\n            return normalize(repositoryObj, repository);\n        } else {\n            return false;\n        }\n    })\n}\n\nexport async function searchIssues(params) {\n    let queryString = `repo:${config.owner}/${config.repo} `;\n    if (params && params.milestone) {\n        queryString += `milestone:${params.milestone} `;\n    }\n    if (params && params.labels && params.labels.length) {\n        queryString += params.labels.map(label => `label:${label} `).join('');\n    }\n    if (params && params.query) {\n        queryString += `${params.query} `\n    }\n    return axios.post(\n        'https://api.github.com/graphql',\n        {\n            query: `query {\n                search(type: ISSUE, last: 20, query: \"${queryString.trim()}\") {\n                    issueCount\n                    pageInfo {\n                        endCursor\n                        startCursor\n                        hasNextPage\n                        hasPreviousPage\n                    }\n                    nodes {\n                        ... on Issue {\n                            id,\n                            title,\n                            number,\n                            createdAt,\n                            milestone {\n                                id\n                            },\n                            labels(first:100) {\n                                nodes {\n                                    id,\n                                }\n                            }\n                        }\n                    }\n                }\n            }`,\n        },\n        {\n            headers: {\n                Authorization: `bearer ${getToken()}`\n            },\n        }\n    ).then(response => {\n        const search = response && response.data && response.data.data && response.data.data.search;\n        if (search) {\n            const norNodes = normalize(search.nodes, [issueSchema]);\n            return {\n                ...search,\n                nodes: norNodes.result,\n                entities: norNodes.entities,\n            }\n        } else {\n            return false;\n        }\n    });\n}\n\n\nexport async function createIssue(params) {\n    return axios.post(`https://api.github.com/repos/${config.owner}/${config.repo}/issues`,\n    {\n        title: params.title,\n        body: params.body,\n        milestone: params.milestone,\n        labels: params.labels,\n    },\n    {\n        headers: {\n            Authorization: `token ${getToken()}`\n        },\n    }).then(response => {\n        const issue = response && response.data\n        if (issue) {\n            issue.id = issue.node_id;\n            issue.labels = {\n                nodes: issue.labels.map(label => {\n                    label.id = label.node_id;\n                    return label;\n                })\n            };\n            issue.milestone.id = issue.milestone.node_id;\n            issue.comments = {\n                nodes: []\n            };\n            return normalize(issue, issueSchema);\n        }\n    })\n}\n\nexport async function editIssue(params) {\n    return axios.patch(\n        `https://api.github.com/repos/${config.owner}/${config.repo}/issues/${params.number}`,\n        {\n            title: params.title,\n            body: params.body,\n            milestone: params.milestone,\n            labels: params.labels\n        },\n        {\n            headers: {\n                Authorization: `token ${getToken()}`\n            },\n        }\n    ).then(response => {\n        const issue = response && response.data\n        if (issue) {\n            issue.id = issue.node_id;\n            issue.labels = {\n                nodes: issue.labels.map(label => {\n                    label.id = label.node_id;\n                    return label;\n                })\n            };\n            issue.milestone.id = issue.milestone.node_id;\n            issue.comments = {\n                nodes: []\n            };\n            return normalize(issue, issueSchema);\n        }\n    })\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"loadingContainer\":\"style_loadingContainer__3W5OD\"};","import * as githubServices from '../services/github'\n\nconst object = require('lodash/fp/object');\n\nexport default {\n    name: 'repository',\n    state: {\n        result: '',\n        loading: true,\n        searchParams: {\n            milestone: '*',\n            labels: [],\n            query: '', \n        }\n    },\n    reducers: {\n        update(state, payload) {\n            return object.merge(state, payload);\n        }\n    },\n    effects: (dispatch) => ({\n        async initIndex(_, rootState) {\n            if (!rootState.repository.loading) {\n                await dispatch.repository.update({\n                    loading: true,\n                });\n            }\n            const response = await githubServices.initIndex()\n            if (response) {\n                await dispatch.entities.update(response.entities);\n                await dispatch.repository.update({\n                    result: response.result,\n                    loading: false,\n                });\n            }\n        },\n        async getSingleIssue(number, rootState) {\n            if (!rootState.repository.loading) {\n                await dispatch.repository.update({\n                    loading: true,\n                });\n            }\n            const response = await githubServices.getSingleIssue(number)\n            if (response) {\n                await dispatch.entities.update(response.entities);\n                await dispatch.repository.update({\n                    result: response.result,\n                    loading: false,\n                })\n            }\n        },\n        async closeCurrentIssue(_, rootState) {\n            const result = rootState.repository.result;\n            const currentRepository = rootState.entities.repositories[result];\n            if (currentRepository) {\n                currentRepository.issue = undefined;\n                const newEntities = {\n                    repositories: {\n                        [result]: currentRepository\n                    }\n                };\n                await dispatch.entities.update(newEntities);\n            }\n        },\n        async initEditor(number, rootState) {\n            const result = rootState.repository.result;\n            const currentRepository = rootState.entities.repositories[result];\n            if(\n                currentRepository &&\n                currentRepository.labels &&\n                currentRepository.labels.nodes.length &&\n                currentRepository.milestones &&\n                currentRepository.milestones.nodes.length\n            ) {\n                return;\n            }\n            if (!rootState.repository.loading) {\n                await dispatch.repository.update({\n                    loading: true,\n                });\n            }\n            const response = await githubServices.initEditor(number)\n            if (response) {\n                await dispatch.entities.update(response.entities);\n                await dispatch.repository.update({\n                    result: response.result,\n                    loading: false,\n                });\n            }\n        },\n        async searchIssues(payload, rootState) {\n            const { milestone, labels, query } = payload;\n            await dispatch.repository.update({\n                searchParams: {\n                    milestone,\n                    labels,\n                    query,\n                }\n            })\n            const response = await githubServices.searchIssues({\n                milestone,\n                labels,\n                query,\n            });\n            if (response) {\n                const result = rootState.repository.result;\n                const currentRepository = rootState.entities.repositories[result];\n                if (currentRepository) {\n                    currentRepository.issues = {\n                        pageInfo: response.pageInfo,\n                        totalCount: response.issueCount,\n                        nodes: response.nodes,\n                    }\n                    dispatch.entities.update({\n                        repositories: {\n                            [result]: currentRepository,\n                        },\n                        ...response.entities,\n                    })\n                }\n            }\n        },\n        async createIssue(payload, rootState) {\n            const response =  await githubServices.createIssue(payload);\n            if (response && response.result) {\n                const currentRepository = rootState.entities.repositories[rootState.repository.result];\n                currentRepository.issue = response.result;\n                await dispatch.entities.update({\n                    ...response.entities,\n                    repositories: {\n                        [rootState.repository.result]: currentRepository,\n                    }\n                });\n            }\n        },\n        async editIssue(payload, rootState) {\n            const response =  await githubServices.editIssue(payload);\n            if (response && response.result) {\n                const currentRepository = rootState.entities.repositories[rootState.repository.result];\n                currentRepository.issue = response.result;\n                await dispatch.entities.update({\n                    ...response.entities,\n                    repositories: {\n                        [rootState.repository.result]: currentRepository,\n                    }\n                });\n                typeof payload.callback === 'function' && payload.callback(`/article/${response.entities.issues[response.result].number}`)\n            }\n        },\n    })\n}","const object = require('lodash/fp/object');\n\nexport default {\n    name: 'entities',\n    state: {\n        repositories: {},\n        issues: {},\n        labels: {},\n        milestones: {},\n        comments: {},\n    },\n    reducers: {\n        update(state, payload) {\n            return object.merge(state, payload)\n        },\n    }\n}","export function getSearchCode() {\n    const searchParams = new URLSearchParams(window.location.search);\n    const code = searchParams.get('code');\n    if (code) {\n        searchParams.delete('code');\n        const search = searchParams.toString();\n        const url = `${window.location.pathname}${search ? `?${search}` : ''}${window.location.hash}`;\n        window.history.pushState(null, null, url)\n        return code;\n    } else {\n        return '';\n    }\n}","export const USER_AUTH = 'GITHUB_USER_AUTH';","import { userAuth, getViewer, addComment } from '../services/github';\nimport { getSearchCode } from '../utils/urlSearchParser';\nimport { USER_AUTH } from '../commons/const';\n\nconst object = require('lodash/fp/object');\n\nexport default {\n    name: 'user',\n    state: {\n        loading: false,\n        auth: false,\n        accessToken: '',\n        scope: '',\n        tokenType: '',\n        viewer: {\n            email: '',\n            id: '',\n            login: '',\n            name: '',\n            url: '',\n            avatarUrl: ''\n        }\n    },\n    reducers: {\n        update(state, payload) {\n            return object.merge(state, payload)\n        },\n    },\n    effects: (dispatch) => ({\n        async getAuthToken(_, rootState) {\n            if (!rootState.user.loading) {\n                await dispatch.user.update({\n                    loading: true,\n                })\n            }\n\n            const code = getSearchCode();\n            const userCache = localStorage.getItem(USER_AUTH);\n            if (userCache ) {\n                const { \n                    access_token,\n                    token_type,\n                    scope,\n                } = JSON.parse(userCache);\n                const user = await getViewer(`${token_type} ${access_token}`)\n                if (user) {\n                    await dispatch.user.update({\n                        accessToken: access_token,\n                        tokenType: token_type,\n                        scope: scope,\n                        auth: true,\n                        loading: false,\n                        viewer: user,\n                    })\n                }\n            } else if (code) {\n                const oauth = await userAuth(code);\n                if (oauth && oauth.access_token) {\n                    localStorage.setItem(USER_AUTH, JSON.stringify(oauth));\n                    const user = await getViewer(`${oauth.token_type} ${oauth.access_token}`)\n                    if (user) {\n                        await dispatch.user.update({\n                            accessToken: oauth.access_token,\n                            tokenType: oauth.token_type,\n                            scope: oauth.scope,\n                            auth: true,\n                            loading: false,\n                            viewer: user,\n                        })\n                    }\n                }\n            }\n\n            await dispatch.user.update({\n                loading: false,\n            })\n        },\n        async addComment({id, content, callback}, rootState) {\n            if (!rootState.user.accessToken) {\n                return;\n            }\n\n            const token = `${rootState.user.tokenType} ${rootState.user.accessToken}`;\n            const comment = await addComment({id, content, token});\n            if (comment) {\n                const issuesMap = rootState.entities.issues;\n                const commentIssue = issuesMap[id];\n                commentIssue.comments.nodes.push(comment.result)\n                await dispatch.entities.update({\n                    issues: {\n                        [id]: commentIssue,\n                    },\n                    ...comment.entities,\n                })\n                typeof callback === 'function' && callback();\n            }\n        }\n    })\n}","import repository from './repository';\nimport entities from './entities';\nimport user from './user';\n\nexport default {\n    user,\n    entities,\n    repository,\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React, { Suspense, lazy } from 'react';\nimport { HashRouter as Router, Route, Switch } from 'react-router-dom';\nimport Loading from '../components/Loading'\n\nconst routerConfig = [\n    {\n        path: '/',\n        exact: true,\n        component: lazy(() => import('./Index')),\n    },\n    {\n        path: '/editor',\n        exact: true,\n        component: lazy(() => import('./Editor')),\n    },\n    {\n        path: '/editor/:number',\n        exact: true,\n        component: lazy(() => import('./Editor')),\n    },\n    {\n        path: '/article/:number',\n        exact: true,\n        component: lazy(() => import('./Article')),\n    }\n];\n\nconst App = () => {\n    return (\n        <Router>\n            <Suspense fallback={<Loading loading={true} />}>\n                <Switch>\n                    {routerConfig.map(route =>\n                        (<Route\n                            key={route.path}\n                            path={route.path}\n                            exact={route.exact}\n                            component={() => <route.component />}\n                        />)\n                    )}\n                </Switch>\n            </Suspense>\n        </Router>\n    );\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { init } from '@rematch/core';\nimport { Provider } from 'react-redux';\nimport models from './models/index';\nimport * as serviceWorker from './services/serviceWorker';\nimport App from './pages/App';\nimport './styles/index.scss';\n\nexport const store = init({\n    models,\n}) \n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>,\n    document.getElementById('root')\n);\n\nserviceWorker.unregister();\n","import React, { Fragment } from 'react';\nimport styles from './style.module.scss';\n\nconst Loading = ({ children, loading=true }) => {\n    if (loading) {\n        return (\n            <div className={styles.loadingContainer} >\n                <i className=\"fa fa-spinner fa-pulse\"></i>\n            </div>\n        );\n    } else {\n        return (\n            <Fragment>\n                {children}\n            </Fragment>\n        );\n    }\n}\n\nexport default Loading;\n"],"sourceRoot":""}