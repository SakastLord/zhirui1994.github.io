{"version":3,"sources":["pages/Index/style.module.scss","pages/Article/style.module.scss","components/Loading/style.module.scss","commons/config.js","commons/schemas.js","utils/getToken.js","services/github.js","models/repository.js","models/entities.js","models/index.js","services/serviceWorker.js","components/Loading/index.js","pages/Index/index.js","pages/Editor/index.js","pages/Article/index.js","pages/App.js","index.js"],"names":["module","exports","container","header","navItem","active","articlesContainer","article","articleTitle","articleInfo","articleCategory","articleLabel","articleBody","issueCommentsContainer","issueComment","commentorAvatar","issueCommentHeader","issueCommentContent","loadingContainer","config","owner","repo","token","milestone","schema","Entity","label","comment","issue","labels","nodes","comments","repository","issues","milestones","getToken","secret","atob","regexp","RegExp","concat","replace","initIndex","services_github_initIndex","apply","this","arguments","_callee","regenerator_default","a","wrap","_context","prev","next","abrupt","axios","post","query","headers","Authorization","then","response","normalize","data","stop","getSingleIssue","_x","services_github_getSingleIssue","_callee2","number","_context2","object","require","models_repository","name","state","result","loading","reducers","update","payload","merge","effects","dispatch","_initIndex","Object","asyncToGenerator","mark","_","rootState","githubServices","sent","entities","_x2","_getSingleIssue","_x3","_x4","closeCurrentIssue","_closeCurrentIssue","_callee3","currentRepository","newEntities","_context3","repositories","undefined","defineProperty","_x5","_x6","models","Boolean","window","location","hostname","match","Loading","_ref","children","_ref$loading","react_default","createElement","className","styles","react","DEFAULT_MILESTONE","title","id","DEFAULT_ISSUES_OBJ","pageInfo","totalCount","IndexPage","_this","classCallCheck","_len","length","args","Array","_key","possibleConstructorReturn","getPrototypeOf","call","activeMilestone","props","_this$props","issuesList","milestonesList","milestonesMap","labelsMap","components_Loading","map","key","classNames","NavLink","to","aria-hidden","moment","createdAt","format","style","background","color","Component","mapState","createSelector","store","repositoriesMap","issuesMap","keys","unshift","issuesObj","connect","EditorPage","_getPrototypeOf2","handleSubmit","bind","assertThisInitialized","e","preventDefault","body","create","value","_this2","htmlFor","ref","input","type","textarea","cols","rows","onClick","ArticlePage","params","_this$props2","commentsMap","currentIssue","dangerouslySetInnerHTML","__html","bodyHTML","author","href","url","src","avatarUrl","alt","login","issueID","routerConfig","path","exact","component","withRouter","App","BrowserRouter","Switch","route","Route","__webpack_require__","d","__webpack_exports__","init","ReactDOM","render","es","pages_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.982f3dc1.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"style_container__1CTEx\",\"header\":\"style_header__1VHED\",\"navItem\":\"style_navItem__36neS\",\"active\":\"style_active__3WdfJ\",\"articlesContainer\":\"style_articlesContainer__2rKNV\",\"article\":\"style_article__g0wxV\",\"articleTitle\":\"style_articleTitle__17Rw5\",\"articleInfo\":\"style_articleInfo__3Tym_\",\"articleCategory\":\"style_articleCategory__f0xgF\",\"articleLabel\":\"style_articleLabel__19l4_\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"style_container__vgro-\",\"articleInfo\":\"style_articleInfo__3N387\",\"articleCategory\":\"style_articleCategory__2Yp5u\",\"articleLabel\":\"style_articleLabel__EAk0-\",\"articleBody\":\"style_articleBody__nw0TM\",\"issueCommentsContainer\":\"style_issueCommentsContainer__31mga\",\"issueComment\":\"style_issueComment__14LFL\",\"commentorAvatar\":\"style_commentorAvatar__vjQHI\",\"issueCommentHeader\":\"style_issueCommentHeader__D6cu-\",\"issueCommentContent\":\"style_issueCommentContent__cd6g6\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"loadingContainer\":\"style_loadingContainer__3W5OD\"};","export default {\n    owner: 'zhirui1994',\n    repo: 'zhirui1994.github.io',\n    token: \"MSt6aGlydWkxOTk0KzBhOGZmMjAwNWM3M2NmNmM1YzEzYWQyZmRkZjhjN2E4MDU0NzdlK3poaXJ1aTE5OTQuZ2l0aHViLmlvKzg=\"\n}","import { schema } from 'normalizr';\n\nexport const milestone = new schema.Entity('milestones');\nexport const label = new schema.Entity('labels');\nexport const comment = new schema.Entity('comments');\nexport const issue = new schema.Entity('issues', {\n    milestone: milestone,\n    labels: {\n        nodes: [label]\n    },\n    comments: {\n        nodes:[comment]\n    },\n});\nexport const repository = new schema.Entity('repositories', {\n    issue,\n    issues: {\n        nodes: [issue]\n    },\n    labels: {\n        nodes: [label]\n    },\n    milestones: {\n        nodes: [milestone]\n    },\n})","import config from '../commons/config';\n\nexport default function getToken() {\n    const secret = atob(config.token);\n    const regexp = new RegExp(`(\\\\+${config.owner}\\\\+|\\\\+${config.repo}\\\\+)`,'g');\n    const token = secret.replace(regexp,'');\n    return token;\n}","import axios from 'axios';\nimport { normalize } from 'normalizr';\nimport config from '../commons/config';\nimport { repository } from '../commons/schemas';\nimport getToken from '../utils/getToken';\n\nexport async function initIndex() {\n    return axios.post(\n        'https://api.github.com/graphql',\n        {\n            query: `query { \n                repository(owner: \"${config.owner}\", name: \"${config.repo}\") {\n                    id,\n                    labels(first: 100) {\n                        nodes {\n                            id,\n                            name,\n                            color,\n                        } \n                    },\n                    milestones(first:100) {\n                        nodes {\n                            id,\n                            number,\n                            state,\n                            title,\n                        }\n                    },\n                    issues(last:20, states:OPEN) {\n                        pageInfo {\n                            endCursor,\n                            startCursor,\n                            hasNextPage,\n                            hasPreviousPage\n                        },\n                        totalCount,\n                        nodes {\n                            id,\n                            title,\n                            number,\n                            createdAt,\n                            milestone {\n                                id\n                            },\n                            labels(first:100) {\n                                nodes {\n                                    id,\n                                }\n                            }\n                        }\n                    }\n                }\n            }`\n        },\n        {\n            headers: {\n                Authorization: `bearer ${getToken()}`\n            },\n        }\n    ).then(response => {\n        return normalize(response.data.data.repository, repository);\n    });\n}\n\nexport async function getSingleIssue(number) {\n    return axios.post(\n        'https://api.github.com/graphql',\n        {\n            query: `query { \n                repository(owner: \"${config.owner}\", name: \"${config.repo}\") {\n                    id,\n                    issue(number: ${number}) {\n                        id,\n                        title,\n                        number,\n                        bodyHTML,\n                        createdAt,\n                        milestone {\n                            id,\n                            number,\n                            state,\n                            title,\n                        },\n                        labels(first:100) {\n                            nodes {\n                                id,\n                                name,\n                                color,\n                            }\n                        },\n                        comments(last: 20) {\n                            nodes {\n                                id,\n                                author {\n                                    avatarUrl,\n                                    login,\n                                    url,\n                                },\n                                bodyHTML,\n                                createdAt,\n                            }\n                        }\n                    }\n                }\n            }`\n        },\n        {\n            headers: {\n                Authorization: `bearer ${getToken()}`\n            },\n        }\n    ).then(response => {\n        return normalize(response.data.data.repository, repository);\n    })\n}","import * as githubServices from '../services/github'\n\nconst object = require('lodash/fp/object');\n\nexport default {\n    name: 'repository',\n    state: {\n        result: '',\n        loading: true,\n    },\n    reducers: {\n        update(state, payload) {\n            return object.merge(state, payload);\n        }\n    },\n    effects: (dispatch) => ({\n        async initIndex(_, rootState) {\n            if (!rootState.repository.loading) {\n                await dispatch.repository.update({\n                    loading: true,\n                });\n            }\n            const response = await githubServices.initIndex()\n            if (response) {\n                await dispatch.entities.update(response.entities);\n                await dispatch.repository.update({\n                    result: response.result,\n                    loading: false,\n                });\n            }\n        },\n        async getSingleIssue(number, rootState) {\n            if (!rootState.repository.loading) {\n                await dispatch.repository.update({\n                    loading: true,\n                });\n            }\n            const response = await githubServices.getSingleIssue(number)\n            if (response) {\n                await dispatch.entities.update(response.entities);\n                await dispatch.repository.update({\n                    result: response.result,\n                    loading: false,\n                })\n            }\n        },\n        async closeCurrentIssue(_, rootState) {\n            const result = rootState.repository.result;\n            const currentRepository = rootState.entities.repositories[result];\n            if (currentRepository) {\n                currentRepository.issue = undefined;\n                const newEntities = {\n                    repositories: {\n                        [result]: currentRepository\n                    }\n                };\n                await dispatch.entities.update(newEntities);\n            }\n        }\n    })\n}","const object = require('lodash/fp/object');\n\nexport default {\n    name: 'entities',\n    state: {\n        repositories: {},\n        issues: {},\n        labels: {},\n        milestones: {},\n        comments: {},\n    },\n    reducers: {\n        update(state, payload) {\n            return object.merge(state, payload)\n        },\n    }\n}","import repository from './repository';\nimport entities from './entities';\n\nexport default {\n    entities,\n    repository,\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React, { Fragment } from 'react';\nimport styles from './style.module.scss';\n\nconst Loading = ({ children, loading=true }) => {\n    if (loading) {\n        return (\n            <div className={styles.loadingContainer} >\n                <i className=\"fa fa-spinner fa-pulse\"></i>\n            </div>\n        );\n    } else {\n        return (\n            <Fragment>\n                {children}\n            </Fragment>\n        );\n    }\n}\n\nexport default Loading;\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport classNames from 'classnames';\nimport moment from 'moment';\nimport { createSelector } from 'reselect';\nimport { NavLink } from 'react-router-dom';\nimport Loading from '../../components/Loading'\nimport styles from './style.module.scss'\n\nconst DEFAULT_MILESTONE = {\n    title: '最新',\n    id: 'default_milestone'\n}\nconst DEFAULT_ISSUES_OBJ = {\n    nodes: [],\n    pageInfo: {\n\n    },\n    totalCount: 0,\n}\n\nclass IndexPage extends Component {\n    constructor(...args) {\n        super(args);\n        this.state = {\n            activeMilestone: DEFAULT_MILESTONE\n        }\n    }\n\n    componentDidMount() {\n        const { dispatch } = this.props;\n        dispatch.repository.initIndex();\n    }\n\n    render() {\n        const { activeMilestone } = this.state;\n        const {\n            loading,\n            issuesList,\n            milestonesList,\n            milestonesMap,\n            labelsMap,\n        } = this.props;\n        return (\n            <Loading loading={loading}>\n                <div className={styles.container}>\n                    <header className={styles.header}>\n                    <nav>\n                        {milestonesList.map(milestone => {\n                            return (\n                                <span\n                                    key={milestone.id}\n                                    className={classNames(\n                                        styles.navItem,\n                                        {\n                                            [styles.active]:\n                                                milestone.title === activeMilestone.title,\n                                        },\n                                    )}\n                                >\n                                    {milestone.title}\n                                </span>\n                            )\n                        })}\n                    </nav>\n                    </header>\n                    <main className={styles.articlesContainer}>\n                        {issuesList.map(issue => {\n                            return (\n                                <article className={styles.article} key={issue.id}>\n                                    <NavLink to={`/article/${issue.number}`}>\n                                        <h3 className={styles.articleTitle}>{issue.title}</h3>\n                                    </NavLink>\n                                    <p className={styles.articleInfo}>\n                                        <span>\n                                            <i className=\"fa fa-calendar\" aria-hidden=\"true\"></i>\n                                            {moment(issue.createdAt).format('YYYY-MM-DD')}\n                                        </span>\n                                        <span>\n                                            <i className=\"fa fa-th-list\" aria-hidden=\"true\"></i>\n                                            <span className={styles.articleCategory}>{milestonesMap[issue.milestone].title}</span>\n                                        </span>\n                                        <span>\n                                            <i className=\"fa fa-tags\" aria-hidden=\"true\"></i>\n                                            {issue.labels.nodes.map(id => {\n                                                const label = labelsMap[id]\n                                                return (\n                                                    <span\n                                                        key={label.id}\n                                                        className={styles.articleLabel}\n                                                        style={{\n                                                            background: `#${label.color}`,\n                                                        }}\n                                                    >\n                                                        {label.name}\n                                                    </span>\n                                                )\n                                            })}\n                                        </span>\n                                    </p>\n                                </article>\n                            )\n                        })}\n                    </main>\n                </div>\n            </Loading>\n        );\n    }\n}\n\nconst mapState = createSelector(\n    [\n        store => store.repository.result,\n        store => store.repository.loading,\n        store => store.entities.repositories,\n        store => store.entities.issues,\n        store => store.entities.milestones,\n        store => store.entities.labels,\n    ],\n    (\n        result,\n        loading,\n        repositoriesMap,\n        issuesMap,\n        milestonesMap,\n        labelsMap,\n    ) => {\n        const repository = repositoriesMap[result];\n        const milestonesList = Object.keys(milestonesMap).map(id => milestonesMap[id]);\n        if (milestonesList.length) {\n            milestonesList.unshift(DEFAULT_MILESTONE);\n        }\n        let issuesObj = DEFAULT_ISSUES_OBJ;\n        if (repository && repository.issues) {\n            issuesObj = repository.issues;\n        }\n        return {\n            loading,\n            labelsMap,\n            milestonesMap,\n            milestonesList,\n            issuesList: issuesObj.nodes.map(id => issuesMap[id]),\n            pageInfo: issuesObj.pageInfo,\n            totalCount: issuesObj.totalCount,\n        }\n    }\n)\n\nexport default connect(mapState)(IndexPage);\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\n\nclass EditorPage extends Component {\n    constructor(...args){\n        super(...args);\n        this.handleSubmit = this.handleSubmit.bind(this);\n    }\n\n    handleSubmit(e) {\n        e.preventDefault();\n        const { dispatch } = this.props;\n        if (this.title && this.body) {\n            dispatch.issues.create({\n                title: this.title.value,\n                body: this.body.value,\n            })\n        }\n    }\n\n    render() {\n        return (\n        <div className=\"Editor\">\n            <header className=\"App-header\">\n                文章编辑页！\n            </header>\n            <form>\n                <label htmlFor=\"title\">标题：<input ref={input => this.title = input} type=\"text\" id=\"title\" /></label>\n                <label htmlFor=\"body\">内容：<textarea ref={textarea => this.body = textarea} cols=\"60\" rows=\"5\" id=\"body\" /></label>\n                <input onClick={this.handleSubmit} type=\"submit\" value=\"创建\" />\n            </form>\n        </div>\n        );\n    }\n}\n\nexport default connect()(EditorPage);\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'react-router-dom'\nimport { createSelector } from 'reselect';\nimport classNames from 'classnames';\nimport moment from 'moment';\nimport Loading from '../../components/Loading';\nimport styles from './style.module.scss';\n\nclass ArticlePage extends Component {\n    componentDidMount() {\n        const { dispatch, match } = this.props;\n        const number = match.params.number;\n        dispatch.repository.getSingleIssue(number);\n    }\n\n    componentWillUnmount() {\n        const { dispatch } = this.props;\n        dispatch.repository.closeCurrentIssue();\n    }\n\n    render() {\n        const {\n            loading,\n            labelsMap,\n            commentsMap,\n            currentIssue,\n            milestonesMap,\n        } = this.props;\n\n        return (\n            <Loading loading={loading}>\n                <div className={styles.container}>\n                    <header>\n                        <h1>{currentIssue.title}</h1>\n                        <p className={styles.articleInfo}>\n                            <span>\n                                <i className=\"fa fa-calendar\" aria-hidden=\"true\"></i>\n                                {moment(currentIssue.createdAt).format('YYYY-MM-DD')}\n                            </span>\n                            <span>\n                                <i className=\"fa fa-th-list\" aria-hidden=\"true\"></i>\n                                <span className={styles.articleCategory}>\n                                    {currentIssue.milestone && milestonesMap[currentIssue.milestone].title}\n                                </span>\n                            </span>\n                            <span>\n                                <i className=\"fa fa-tags\" aria-hidden=\"true\"></i>\n                                {currentIssue.labels && currentIssue.labels.nodes.map(id => {\n                                    const label = labelsMap[id]\n                                    return (\n                                        <span\n                                            key={label.id}\n                                            className={styles.articleLabel}\n                                            style={{\n                                                background: `#${label.color}`,\n                                            }}\n                                        >\n                                            {label.name}\n                                        </span>\n                                    )\n                                })}\n                            </span>\n                        </p>\n                    </header>\n                    <main>\n                        <article\n                            className={classNames(styles.articleBody, 'markdown-body')}\n                            dangerouslySetInnerHTML={{ __html: currentIssue.bodyHTML }}\n                        ></article>\n                        <div className={styles.issueCommentsContainer}>\n                            {currentIssue.comments && currentIssue.comments.nodes.map(id => {\n                                const comment = commentsMap[id];\n\n                                if (comment) {\n                                    const { author } = comment;\n                                    return (\n                                        <section key={comment.id} className={styles.issueComment}>\n                                            <a className={styles.commentorAvatar} href={author.url}>\n                                                <img src={author.avatarUrl} alt=\"This is commentor's avatar\" />\n                                            </a>\n                                            <p className={styles.issueCommentHeader}>\n                                                <a href={author.url}><em>{author.login}</em></a>\n                                                <span>{moment(comment.createdAt).format('YYYY-MM-DD HH:mm:ss')}</span>\n                                            </p>\n                                            <article\n                                                className={classNames(styles.issueCommentContent, 'markdown-body')}\n                                                dangerouslySetInnerHTML={{ __html: comment.bodyHTML}}\n                                            ></article>\n                                        </section>\n                                    );\n                                } else {\n                                    return null;\n                                }\n                            })}\n                        </div>\n                    </main>\n                </div>\n            </Loading>\n        );\n    }\n}\n\nconst mapState = createSelector(\n    [\n        store => store.repository.result,\n        store => store.repository.loading,\n        store => store.entities.repositories,\n        store => store.entities.issues,\n        store => store.entities.milestones,\n        store => store.entities.labels,\n        store => store.entities.comments,\n    ],\n    (\n        result,\n        loading,\n        repositoriesMap,\n        issuesMap,\n        milestonesMap,\n        labelsMap,\n        commentsMap,\n    ) => {\n        let issueID, currentIssue = {};\n        const repository = repositoriesMap[result];\n        if (repository) {\n            issueID = repository.issue;\n        }\n        if (issueID) {\n            currentIssue = issuesMap[issueID];\n        }\n        return {\n            loading,\n            currentIssue,\n            milestonesMap,\n            labelsMap,\n            commentsMap,\n        };\n    }\n)\n\n\nexport default  connect(mapState)(withRouter(ArticlePage));","import React from 'react';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\nimport IndexPage from './Index';\nimport EditorPage from './Editor';\nimport ArticlePage from './Article';\n\nconst routerConfig = [\n    {\n        path: '/',\n        exact: true,\n        component: IndexPage,\n    },\n    {\n        path: '/editor',\n        exact: true,\n        component: EditorPage,\n    },\n    {\n        path: '/article/:number',\n        exact: true,\n        component: ArticlePage,\n    }\n];\n\nconst App = () => {\n    return (\n        <Router>\n            <Switch>\n                {routerConfig.map(route =>\n                    (<Route\n                        key={route.path}\n                        path={route.path}\n                        exact={route.exact}\n                        component={route.component}\n                    />)\n                )}\n            </Switch>\n        </Router>\n    );\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { init } from '@rematch/core';\nimport { Provider } from 'react-redux';\nimport models from './models/index';\nimport * as serviceWorker from './services/serviceWorker';\nimport App from './pages/App';\nimport './styles/index.scss';\n\nexport const store = init({\n    models,\n}) \n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>,\n    document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}