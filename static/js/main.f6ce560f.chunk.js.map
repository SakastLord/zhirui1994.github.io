{"version":3,"sources":["pages/Index/style.module.scss","components/Loading/style.module.scss","pages/Article/github.svg","pages/Article/style.module.scss","commons/config.js","commons/schemas.js","utils/getToken.js","services/github.js","models/repository.js","models/entities.js","utils/urlSearchParser.js","commons/const.js","models/user.js","models/index.js","services/serviceWorker.js","components/Loading/index.js","pages/Index/index.js","pages/Editor/index.js","pages/Article/index.js","pages/App.js","index.js"],"names":["module","exports","container","header","navItem","active","articlesContainer","article","articleTitle","articleInfo","articleCategory","articleLabel","loadingContainer","__webpack_require__","p","articleBody","issueCommentsContainer","issueComment","commentorAvatar","issueCommentHeader","issueCommentContent","createCommentContainer","createComment","createCommentAvatar","createCommentHeader","commentSwitch","commentorLogin","createCommentInputContainer","createCommentTextarea","createCommentOperator","config","owner","repo","token","client_id","client_secret","milestone","schema","Entity","label","comment","issue","labels","nodes","comments","repository","issues","milestones","getToken","secret","atob","regexp","RegExp","concat","replace","initIndex","services_github_initIndex","apply","this","arguments","_callee","regenerator_default","a","wrap","_context","prev","next","abrupt","axios","post","query","headers","Authorization","then","response","normalize","data","stop","getSingleIssue","_x","services_github_getSingleIssue","_callee2","number","_context2","getLoginAuthLink","scope","redirect_uri","encodeURIComponent","queryString","Object","keys","map","key","join","userAuth","_x2","_userAuth","_callee3","code","_context3","responseType","getViewer","_x3","_getViewer","_callee4","_context4","object","require","models_repository","name","state","result","loading","reducers","update","payload","merge","effects","dispatch","_initIndex","asyncToGenerator","mark","_","rootState","githubServices","sent","entities","_getSingleIssue","_x4","closeCurrentIssue","_closeCurrentIssue","currentRepository","newEntities","repositories","undefined","defineProperty","_x5","_x6","getSearchCode","searchParams","URLSearchParams","window","location","search","get","delete","toString","url","pathname","hash","history","pushState","models","user","auth","accessToken","tokenType","viewer","email","id","login","avatarUrl","getAuthToken","_getAuthToken","userCache","_JSON$parse","access_token","token_type","oauth","_user","localStorage","getItem","JSON","parse","setItem","stringify","Boolean","hostname","match","Loading","_ref","children","_ref$loading","react_default","createElement","className","styles","react","DEFAULT_MILESTONE","title","DEFAULT_ISSUES_OBJ","pageInfo","totalCount","IndexPage","_this","classCallCheck","_len","length","args","Array","_key","possibleConstructorReturn","getPrototypeOf","call","activeMilestone","props","_this$props","issuesList","milestonesList","milestonesMap","labelsMap","components_Loading","classNames","NavLink","to","aria-hidden","moment","createdAt","format","style","background","color","Component","mapState","createSelector","store","repositoriesMap","issuesMap","unshift","issuesObj","connect","EditorPage","_getPrototypeOf2","handleSubmit","bind","assertThisInitialized","e","preventDefault","body","create","value","_this2","htmlFor","ref","input","type","textarea","cols","rows","onClick","ArticlePage","handleInput","currentTarget","height","scrollTop","scrollHeight","params","_this$props2","commentsMap","currentIssue","isUserLoading","dangerouslySetInnerHTML","__html","bodyHTML","author","href","src","alt","class","githubIconUrl","onInput","placeholder","issueID","routerConfig","path","exact","component","withRouter","App","HashRouter","Switch","route","Route","d","__webpack_exports__","init","ReactDOM","render","es","pages_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.f6ce560f.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"style_container__Zb8RY\",\"header\":\"style_header__3uDEC\",\"navItem\":\"style_navItem__1wdaT\",\"active\":\"style_active__1gcS-\",\"articlesContainer\":\"style_articlesContainer__2mYTI\",\"article\":\"style_article__2NtwU\",\"articleTitle\":\"style_articleTitle__RDDaw\",\"articleInfo\":\"style_articleInfo__2KrYr\",\"articleCategory\":\"style_articleCategory__18gfE\",\"articleLabel\":\"style_articleLabel__3y7XL\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"loadingContainer\":\"style_loadingContainer__3Pquw\"};","module.exports = __webpack_public_path__ + \"static/media/github.c9e82c1f.svg\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"style_container__3FZwK\",\"articleInfo\":\"style_articleInfo__1d5v-\",\"articleCategory\":\"style_articleCategory__35I8s\",\"articleLabel\":\"style_articleLabel__26rCk\",\"articleBody\":\"style_articleBody__2JILV\",\"issueCommentsContainer\":\"style_issueCommentsContainer__3eK_x\",\"issueComment\":\"style_issueComment__2oN0w\",\"commentorAvatar\":\"style_commentorAvatar__BkYRh\",\"issueCommentHeader\":\"style_issueCommentHeader__1lxXR\",\"issueCommentContent\":\"style_issueCommentContent__2bwiX\",\"createCommentContainer\":\"style_createCommentContainer__mllTZ\",\"createComment\":\"style_createComment__3rcPo\",\"createCommentAvatar\":\"style_createCommentAvatar__1v_t3\",\"createCommentHeader\":\"style_createCommentHeader__3opNa\",\"commentSwitch\":\"style_commentSwitch__2d5YM\",\"active\":\"style_active__6_-G8\",\"commentorLogin\":\"style_commentorLogin__2fsAa\",\"createCommentInputContainer\":\"style_createCommentInputContainer__2VtH6\",\"createCommentTextarea\":\"style_createCommentTextarea__mjrW_\",\"createCommentOperator\":\"style_createCommentOperator__2pW3w\"};","\r\nexport default {\r\n    owner: 'zhirui1994',\r\n    repo: 'zhirui1994.github.io',\r\n    token: 'MSt6aGlydWkxOTk0KzBhOGZmMjAwNWM3M2NmNmM1YzEzYWQyZmRkZjhjN2E4MDU0NzdlK3poaXJ1aTE5OTQuZ2l0aHViLmlvKzg=',\r\n    client_id: '635ab95d562259d5e20a',\r\n    client_secret: 'e795e7e409ce731cf304facd92aecd305c774731',\r\n}","import { schema } from 'normalizr';\n\nexport const milestone = new schema.Entity('milestones');\nexport const label = new schema.Entity('labels');\nexport const comment = new schema.Entity('comments');\nexport const issue = new schema.Entity('issues', {\n    milestone: milestone,\n    labels: {\n        nodes: [label]\n    },\n    comments: {\n        nodes:[comment]\n    },\n});\nexport const repository = new schema.Entity('repositories', {\n    issue,\n    issues: {\n        nodes: [issue]\n    },\n    labels: {\n        nodes: [label]\n    },\n    milestones: {\n        nodes: [milestone]\n    },\n})","import config from '../commons/config';\n\nexport default function getToken() {\n    const secret = atob(config.token);\n    const regexp = new RegExp(`(\\\\+${config.owner}\\\\+|\\\\+${config.repo}\\\\+)`,'g');\n    const token = secret.replace(regexp,'');\n    return token;\n}","import axios from 'axios';\nimport { normalize } from 'normalizr';\nimport config from '../commons/config';\nimport { repository } from '../commons/schemas';\nimport getToken from '../utils/getToken';\n\nexport async function initIndex() {\n    return axios.post(\n        'https://api.github.com/graphql',\n        {\n            query: `query { \n                repository(owner: \"${config.owner}\", name: \"${config.repo}\") {\n                    id,\n                    labels(first: 100) {\n                        nodes {\n                            id,\n                            name,\n                            color,\n                        } \n                    },\n                    milestones(first:100) {\n                        nodes {\n                            id,\n                            number,\n                            state,\n                            title,\n                        }\n                    },\n                    issues(last:20, states:OPEN) {\n                        pageInfo {\n                            endCursor,\n                            startCursor,\n                            hasNextPage,\n                            hasPreviousPage\n                        },\n                        totalCount,\n                        nodes {\n                            id,\n                            title,\n                            number,\n                            createdAt,\n                            milestone {\n                                id\n                            },\n                            labels(first:100) {\n                                nodes {\n                                    id,\n                                }\n                            }\n                        }\n                    }\n                }\n            }`\n        },\n        {\n            headers: {\n                Authorization: `bearer ${getToken()}`\n            },\n        }\n    ).then(response => {\n        return normalize(response.data.data.repository, repository);\n    });\n}\n\nexport async function getSingleIssue(number) {\n    return axios.post(\n        'https://api.github.com/graphql',\n        {\n            query: `query { \n                repository(owner: \"${config.owner}\", name: \"${config.repo}\") {\n                    id,\n                    issue(number: ${number}) {\n                        id,\n                        title,\n                        number,\n                        bodyHTML,\n                        createdAt,\n                        milestone {\n                            id,\n                            number,\n                            state,\n                            title,\n                        },\n                        labels(first:100) {\n                            nodes {\n                                id,\n                                name,\n                                color,\n                            }\n                        },\n                        comments(last: 20) {\n                            nodes {\n                                id,\n                                author {\n                                    avatarUrl,\n                                    login,\n                                    url,\n                                },\n                                bodyHTML,\n                                createdAt,\n                            }\n                        }\n                    }\n                }\n            }`\n        },\n        {\n            headers: {\n                Authorization: `bearer ${getToken()}`\n            },\n        }\n    ).then(response => {\n        return normalize(response.data.data.repository, repository);\n    })\n}\n\nexport function getLoginAuthLink() {\n    const query = {\n        scope: 'public_repo',\n        redirect_uri: encodeURIComponent(`https://zhirui1994.github.io/#/article/1`),\n        client_id: config.client_id,\n        // client_secret: config.client_secret,\n    }\n    const queryString = Object.keys(query).map(key => `${key}=${query[key]}`).join('&');\n    return `https://github.com/login/oauth/authorize?${queryString}`\n}\n\nexport async function userAuth(code) {\n    const proxyUrl = 'https://cors-anywhere.herokuapp.com/https://github.com/login/oauth/access_token'\n    axios.post(proxyUrl, {\n        code,\n        client_id: config.client_id,\n        client_secret: config.client_secret,\n    },\n    {\n        responseType: 'json',\n    }).then(response => {\n        return response && response.data;\n    })\n}\n\nexport async function getViewer(token) {\n    axios.post('https://api.github.com/graphql', {\n        query: `query { \n            viewer {\n                email,\n                id,\n                login,\n                name,\n                url\n            }\n        }`\n        },\n        {\n            Authorization: token,\n            responseType: 'json',\n        }\n    ).then(response => response && response.data && response.data.data);\n}","import * as githubServices from '../services/github'\n\nconst object = require('lodash/fp/object');\n\nexport default {\n    name: 'repository',\n    state: {\n        result: '',\n        loading: true,\n    },\n    reducers: {\n        update(state, payload) {\n            return object.merge(state, payload);\n        }\n    },\n    effects: (dispatch) => ({\n        async initIndex(_, rootState) {\n            if (!rootState.repository.loading) {\n                await dispatch.repository.update({\n                    loading: true,\n                });\n            }\n            const response = await githubServices.initIndex()\n            if (response) {\n                await dispatch.entities.update(response.entities);\n                await dispatch.repository.update({\n                    result: response.result,\n                    loading: false,\n                });\n            }\n        },\n        async getSingleIssue(number, rootState) {\n            if (!rootState.repository.loading) {\n                await dispatch.repository.update({\n                    loading: true,\n                });\n            }\n            const response = await githubServices.getSingleIssue(number)\n            if (response) {\n                await dispatch.entities.update(response.entities);\n                await dispatch.repository.update({\n                    result: response.result,\n                    loading: false,\n                })\n            }\n        },\n        async closeCurrentIssue(_, rootState) {\n            const result = rootState.repository.result;\n            const currentRepository = rootState.entities.repositories[result];\n            if (currentRepository) {\n                currentRepository.issue = undefined;\n                const newEntities = {\n                    repositories: {\n                        [result]: currentRepository\n                    }\n                };\n                await dispatch.entities.update(newEntities);\n            }\n        }\n    })\n}","const object = require('lodash/fp/object');\n\nexport default {\n    name: 'entities',\n    state: {\n        repositories: {},\n        issues: {},\n        labels: {},\n        milestones: {},\n        comments: {},\n    },\n    reducers: {\n        update(state, payload) {\n            return object.merge(state, payload)\n        },\n    }\n}","export function getSearchCode() {\n    const searchParams = new URLSearchParams(window.location.search);\n    const code = searchParams.get('code');\n    if (code) {\n        searchParams.delete('code');\n        const search = searchParams.toString();\n        const url = `${window.location.pathname}${search ? `?${search}` : ''}${window.location.hash}`;\n        window.history.pushState(null, null, url)\n        return code;\n    } else {\n        return '';\n    }\n}","export const USER_AUTH = 'GITHUB_USER_AUTH';","import { userAuth, getViewer } from '../services/github';\nimport { getSearchCode } from '../utils/urlSearchParser';\nimport { USER_AUTH } from '../commons/const';\n\nconst object = require('lodash/fp/object');\n\nexport default {\n    name: 'user',\n    state: {\n        loading: false,\n        auth: false,\n        accessToken: '',\n        scope: '',\n        tokenType: '',\n        viewer: {\n            email: '',\n            id: '',\n            login: '',\n            name: '',\n            url: '',\n            avatarUrl: ''\n        }\n    },\n    reducers: {\n        update(state, payload) {\n            return object.merge(state, payload)\n        },\n    },\n    effects: (dispatch) => ({\n        async getAuthToken(_, rootState) {\n            if (!rootState.user.loading) {\n                await dispatch.user.update({\n                    loading: true,\n                })\n            }\n            \n            const code = getSearchCode();\n            const userCache = localStorage.getItem(USER_AUTH);\n            if (userCache ) {\n                const { \n                    access_token,\n                    token_type,\n                    scope,\n                } = JSON.parse(userCache);\n                const user = await getViewer(`${token_type} ${access_token}`)\n                if (user) {\n                    await dispatch.user.update({\n                        accessToken: access_token,\n                        tokenType: token_type,\n                        scope: scope,\n                        auth: true,\n                        loading: false,\n                        viewer: user,\n                    })\n                }\n            } else if (code) {\n                const oauth = await userAuth(code);\n                if (oauth && oauth.access_token) {\n                    localStorage.setItem(USER_AUTH, JSON.stringify(oauth));\n                    const user = await getViewer(`${oauth.token_type} ${oauth.access_token}`)\n                    if (user) {\n                        await dispatch.user.update({\n                            accessToken: oauth.access_token,\n                            tokenType: oauth.token_type,\n                            scope: oauth.scope,\n                            auth: true,\n                            loading: false,\n                            viewer: user,\n                        })\n                    }\n                }\n            }\n\n            if (rootState.user.loading) {\n                await dispatch.user.update({\n                    loading: false,\n                })\n            }\n        }\n    })\n}","import repository from './repository';\nimport entities from './entities';\nimport user from './user';\n\nexport default {\n    user,\n    entities,\n    repository,\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React, { Fragment } from 'react';\nimport styles from './style.module.scss';\n\nconst Loading = ({ children, loading=true }) => {\n    if (loading) {\n        return (\n            <div className={styles.loadingContainer} >\n                <i className=\"fa fa-spinner fa-pulse\"></i>\n            </div>\n        );\n    } else {\n        return (\n            <Fragment>\n                {children}\n            </Fragment>\n        );\n    }\n}\n\nexport default Loading;\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport classNames from 'classnames';\nimport moment from 'moment';\nimport { createSelector } from 'reselect';\nimport { NavLink } from 'react-router-dom';\nimport Loading from '../../components/Loading'\nimport styles from './style.module.scss'\n\nconst DEFAULT_MILESTONE = {\n    title: '最新',\n    id: 'default_milestone'\n}\nconst DEFAULT_ISSUES_OBJ = {\n    nodes: [],\n    pageInfo: {\n\n    },\n    totalCount: 0,\n}\n\nclass IndexPage extends Component {\n    constructor(...args) {\n        super(args);\n        this.state = {\n            activeMilestone: DEFAULT_MILESTONE\n        }\n    }\n\n    componentDidMount() {\n        const { dispatch } = this.props;\n        dispatch.repository.initIndex();\n    }\n\n    render() {\n        const { activeMilestone } = this.state;\n        const {\n            loading,\n            issuesList,\n            milestonesList,\n            milestonesMap,\n            labelsMap,\n        } = this.props;\n        return (\n            <Loading loading={loading}>\n                <div className={styles.container}>\n                    <header className={styles.header}>\n                    <nav>\n                        {milestonesList.map(milestone => {\n                            return (\n                                <span\n                                    key={milestone.id}\n                                    className={classNames(\n                                        styles.navItem,\n                                        {\n                                            [styles.active]:\n                                                milestone.title === activeMilestone.title,\n                                        },\n                                    )}\n                                >\n                                    {milestone.title}\n                                </span>\n                            )\n                        })}\n                    </nav>\n                    </header>\n                    <main className={styles.articlesContainer}>\n                        {issuesList.map(issue => {\n                            return (\n                                <article className={styles.article} key={issue.id}>\n                                    <NavLink to={`/article/${issue.number}`}>\n                                        <h3 className={styles.articleTitle}>{issue.title}</h3>\n                                    </NavLink>\n                                    <p className={styles.articleInfo}>\n                                        <span>\n                                            <i className=\"fa fa-calendar\" aria-hidden=\"true\"></i>\n                                            {moment(issue.createdAt).format('YYYY-MM-DD')}\n                                        </span>\n                                        <span>\n                                            <i className=\"fa fa-th-list\" aria-hidden=\"true\"></i>\n                                            <span className={styles.articleCategory}>{milestonesMap[issue.milestone].title}</span>\n                                        </span>\n                                        <span>\n                                            <i className=\"fa fa-tags\" aria-hidden=\"true\"></i>\n                                            {issue.labels.nodes.map(id => {\n                                                const label = labelsMap[id]\n                                                return (\n                                                    <span\n                                                        key={label.id}\n                                                        className={styles.articleLabel}\n                                                        style={{\n                                                            background: `#${label.color}`,\n                                                        }}\n                                                    >\n                                                        {label.name}\n                                                    </span>\n                                                )\n                                            })}\n                                        </span>\n                                    </p>\n                                </article>\n                            )\n                        })}\n                    </main>\n                </div>\n            </Loading>\n        );\n    }\n}\n\nconst mapState = createSelector(\n    [\n        store => store.repository.result,\n        store => store.repository.loading,\n        store => store.entities.repositories,\n        store => store.entities.issues,\n        store => store.entities.milestones,\n        store => store.entities.labels,\n    ],\n    (\n        result,\n        loading,\n        repositoriesMap,\n        issuesMap,\n        milestonesMap,\n        labelsMap,\n    ) => {\n        const repository = repositoriesMap[result];\n        const milestonesList = Object.keys(milestonesMap).map(id => milestonesMap[id]);\n        if (milestonesList.length) {\n            milestonesList.unshift(DEFAULT_MILESTONE);\n        }\n        let issuesObj = DEFAULT_ISSUES_OBJ;\n        if (repository && repository.issues) {\n            issuesObj = repository.issues;\n        }\n        return {\n            loading,\n            labelsMap,\n            milestonesMap,\n            milestonesList,\n            issuesList: issuesObj.nodes.map(id => issuesMap[id]),\n            pageInfo: issuesObj.pageInfo,\n            totalCount: issuesObj.totalCount,\n        }\n    }\n)\n\nexport default connect(mapState)(IndexPage);\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\n\nclass EditorPage extends Component {\n    constructor(...args){\n        super(...args);\n        this.handleSubmit = this.handleSubmit.bind(this);\n    }\n\n    handleSubmit(e) {\n        e.preventDefault();\n        const { dispatch } = this.props;\n        if (this.title && this.body) {\n            dispatch.issues.create({\n                title: this.title.value,\n                body: this.body.value,\n            })\n        }\n    }\n\n    render() {\n        return (\n        <div className=\"Editor\">\n            <header className=\"App-header\">\n                文章编辑页！\n            </header>\n            <form>\n                <label htmlFor=\"title\">标题：<input ref={input => this.title = input} type=\"text\" id=\"title\" /></label>\n                <label htmlFor=\"body\">内容：<textarea ref={textarea => this.body = textarea} cols=\"60\" rows=\"5\" id=\"body\" /></label>\n                <input onClick={this.handleSubmit} type=\"submit\" value=\"创建\" />\n            </form>\n        </div>\n        );\n    }\n}\n\nexport default connect()(EditorPage);\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'react-router-dom'\nimport { createSelector } from 'reselect';\nimport classNames from 'classnames';\nimport moment from 'moment';\nimport Loading from '../../components/Loading';\nimport { getLoginAuthLink } from '../../services/github';\nimport styles from './style.module.scss';\nimport githubIconUrl from './github.svg';\n\nclass ArticlePage extends Component {\n    componentDidMount() {\n        const { dispatch, match } = this.props;\n        const number = match.params.number;\n        dispatch.user.getAuthToken();\n        dispatch.repository.getSingleIssue(number);\n    }\n\n    componentWillUnmount() {\n        const { dispatch } = this.props;\n        dispatch.repository.closeCurrentIssue();\n    }\n\n    handleInput = (e) => {\n        e.preventDefault();\n        const { currentTarget } = e;\n        currentTarget.style.height = 'auto';\n        currentTarget.style.height = currentTarget.scrollTop + currentTarget.scrollHeight + 'px';\n    }\n\n    render() {\n        const {\n            loading,\n            labelsMap,\n            commentsMap,\n            currentIssue,\n            milestonesMap,\n            viewer,\n            isUserLoading,\n        } = this.props;\n\n        return (\n            <Loading loading={loading}>\n                <div className={styles.container}>\n                    <header>\n                        <h1>{currentIssue.title}</h1>\n                        <p className={styles.articleInfo}>\n                            <span>\n                                <i className=\"fa fa-calendar\" aria-hidden=\"true\"></i>\n                                {moment(currentIssue.createdAt).format('YYYY-MM-DD')}\n                            </span>\n                            <span>\n                                <i className=\"fa fa-th-list\" aria-hidden=\"true\"></i>\n                                <span className={styles.articleCategory}>\n                                    {currentIssue.milestone && milestonesMap[currentIssue.milestone].title}\n                                </span>\n                            </span>\n                            <span>\n                                <i className=\"fa fa-tags\" aria-hidden=\"true\"></i>\n                                {currentIssue.labels && currentIssue.labels.nodes.map(id => {\n                                    const label = labelsMap[id]\n                                    return (\n                                        <span\n                                            key={label.id}\n                                            className={styles.articleLabel}\n                                            style={{\n                                                background: `#${label.color}`,\n                                            }}\n                                        >\n                                            {label.name}\n                                        </span>\n                                    )\n                                })}\n                            </span>\n                        </p>\n                    </header>\n                    <main>\n                        <article\n                            className={classNames(styles.articleBody, 'markdown-body')}\n                            dangerouslySetInnerHTML={{ __html: currentIssue.bodyHTML }}\n                        ></article>\n                        <div className={styles.issueCommentsContainer}>\n                            {currentIssue.comments && currentIssue.comments.nodes.map(id => {\n                                const comment = commentsMap[id];\n                                if (comment) {\n                                    const { author } = comment;\n                                    return (\n                                        <section key={comment.id} className={styles.issueComment}>\n                                            <a className={styles.commentorAvatar} href={author.url}>\n                                                <img src={author.avatarUrl} alt=\"This is commentor's avatar\" />\n                                            </a>\n                                            <p className={styles.issueCommentHeader}>\n                                                <a href={author.url}><em>{author.login}</em></a>\n                                                <span>{moment(comment.createdAt).format('YYYY-MM-DD HH:mm:ss')}</span>\n                                            </p>\n                                            <article\n                                                className={classNames(styles.issueCommentContent, 'markdown-body')}\n                                                dangerouslySetInnerHTML={{ __html: comment.bodyHTML}}\n                                            ></article>\n                                        </section>\n                                    );\n                                } else {\n                                    return null;\n                                }\n                            })}\n                            <section className={styles.createCommentContainer}>\n                                <div className={styles.createComment} >\n                                    {viewer.id ?\n                                        (<div className={styles.createCommentAvatar}>\n                                            <img src={viewer.avatarUrl} alt=\"This is commentor's avatar\" />\n                                        </div>) :\n                                        (<a\n                                            className={styles.createCommentAvatar}\n                                            href={getLoginAuthLink()}\n                                        >\n                                            {isUserLoading ? \n                                                <i class=\"fa fa-circle-o-notch fa-spin fa-3x fa-fw\"></i>\n                                                :\n                                                <img src={githubIconUrl} alt=\"This is commentor's avatar\" />\n                                            }\n                                        </a>)\n                                    }\n                                    <div className={styles.createCommentHeader}>\n                                        <span className={classNames(styles.commentSwitch, styles.active)} >编辑</span>\n                                        <span className={styles.commentSwitch} >预览</span>\n                                        {(!viewer.id && !isUserLoading) && (\n                                            <span className={styles.commentorLogin} >通过GitHub<a href={getLoginAuthLink()}>登陆</a></span>\n                                        )}\n                                    </div>\n                                    <div className={styles.createCommentInputContainer}>\n                                        <textarea onInput={this.handleInput} className={styles.createCommentTextarea} placeholder=\"请编辑您的评论\"></textarea>\n                                    </div>\n                                    <div className={styles.createCommentOperator}>\n                                        <button>评论</button>\n                                    </div>\n                                </div>\n                            </section>\n                        </div>\n                    </main>\n                </div>\n            </Loading>\n        );\n    }\n}\n\nconst mapState = createSelector(\n    [\n        store => store.repository.result,\n        store => store.repository.loading,\n        store => store.entities.repositories,\n        store => store.entities.issues,\n        store => store.entities.milestones,\n        store => store.entities.labels,\n        store => store.entities.comments,\n        store => store.user.viewer,\n        store => store.user.loading,\n    ],\n    (\n        result,\n        loading,\n        repositoriesMap,\n        issuesMap,\n        milestonesMap,\n        labelsMap,\n        commentsMap,\n        viewer,\n        isUserLoading,\n    ) => {\n        let issueID, currentIssue = {};\n        const repository = repositoriesMap[result];\n        if (repository) {\n            issueID = repository.issue;\n        }\n        if (issueID) {\n            currentIssue = issuesMap[issueID];\n        }\n        return {\n            loading,\n            currentIssue,\n            milestonesMap,\n            labelsMap,\n            commentsMap,\n            viewer,\n            isUserLoading,\n        };\n    }\n)\n\n\nexport default  connect(mapState)(withRouter(ArticlePage));","import React from 'react';\nimport { HashRouter as Router, Route, Switch } from 'react-router-dom';\nimport IndexPage from './Index';\nimport EditorPage from './Editor';\nimport ArticlePage from './Article';\n\nconst routerConfig = [\n    {\n        path: '/',\n        exact: true,\n        component: IndexPage,\n    },\n    {\n        path: '/editor',\n        exact: true,\n        component: EditorPage,\n    },\n    {\n        path: '/article/:number',\n        exact: true,\n        component: ArticlePage,\n    }\n];\n\nconst App = () => {\n    return (\n        <Router>\n            <Switch>\n                {routerConfig.map(route =>\n                    (<Route\n                        key={route.path}\n                        path={route.path}\n                        exact={route.exact}\n                        component={route.component}\n                    />)\n                )}\n            </Switch>\n        </Router>\n    );\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { init } from '@rematch/core';\nimport { Provider } from 'react-redux';\nimport models from './models/index';\nimport * as serviceWorker from './services/serviceWorker';\nimport App from './pages/App';\nimport './styles/index.scss';\n\nexport const store = init({\n    models,\n}) \n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>,\n    document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}