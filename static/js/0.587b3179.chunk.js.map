{"version":3,"sources":["components/MarkdownPreviewer/style.module.scss","pages/Editor/style.module.scss","components/MarkdownPreviewer/index.js","pages/Editor/index.js"],"names":["module","exports","markdownPreviewer","editorContainer","header","titleInput","fileds","checkLabel","submitButton","editorContent","marked","setOptions","breaks","highlight","code","hljs","highlightAuto","value","MarkdownPreviewer","handleInput","e","onChange","_this","props","editor","preventDefault","preview","innerHTML","defaultValue","this","_this2","react_default","a","createElement","className","styles","id","spellCheck","ref","textarea","onInput","section","Component","EditorPage","state","title","body","milestone","labels","handleChange","setState","handleTitleChange","target","handleRadioClick","input","stopPropagation","tagName","querySelector","handleCheckboxClick","idx","indexOf","splice","Object","toConsumableArray","push","handleSubmit","dispatch","_this$state","params","callback","url","history","number","repository","editIssue","objectSpread","createIssue","handleBack","goBack","_this$props","labelsList","milestonesList","length","initEditor","closeCurrentIssue","_this$props2","loading","onClick","Loading","htmlFor","type","classNames","components_MarkdownPreviewer","map","key","readOnly","name","checked","label","concat","Date","getFullYear","memoize","match","currentIssue","milestonesMap","labelsMap","prevCurrentIssue","nodes","PureComponent","mapState","createSelector","store","result","entities","repositories","milestones","issues","repositoriesMap","issuesMap","currentRepository","currentIssueId","issue","connect","withRouter"],"mappings":"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","file":"static/js/0.587b3179.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"markdownPreviewer\":\"style_markdownPreviewer__1aG82\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"editorContainer\":\"style_editorContainer__2CpJ4\",\"header\":\"style_header__b0b1a\",\"titleInput\":\"style_titleInput__13kzQ\",\"fileds\":\"style_fileds__3fJcb\",\"checkLabel\":\"style_checkLabel__3_j0j\",\"submitButton\":\"style_submitButton__1urt6\",\"editorContent\":\"style_editorContent__1vN33\"};","import React, { Component } from 'react';\nimport marked from 'marked';\nimport styles from './style.module.scss';\nimport hljs from 'highlight.js';\nimport 'highlight.js/styles/github-gist.css';\n\nmarked.setOptions({\n    breaks: true,\n    highlight: (code) => {\n        return hljs.highlightAuto(code).value;\n    }\n})\n\nclass MarkdownPreviewer extends Component {\n    handleInput = (e) => {\n        const { onChange } = this.props;\n        const value = this.editor.value;\n        e.preventDefault();\n        typeof onChange === 'function' && onChange(value);\n        this.preview.innerHTML = marked(value);\n    }\n\n    componentDidMount() {\n        const { defaultValue } = this.props;\n        if (defaultValue) {\n            this.preview.innerHTML = marked(defaultValue);\n        }\n    }\n\n    render() {\n        const { defaultValue } = this.props;\n        return (\n            <div className={styles.markdownPreviewer}>\n                <textarea\n                    id=\"editor\"\n                    spellCheck=\"false\"\n                    ref={textarea => this.editor = textarea}\n                    onInput={this.handleInput}\n                    defaultValue={defaultValue}\n                ></textarea>\n                <section\n                    id=\"preview\"\n                    ref={section => this.preview = section}\n                ></section>\n            </div>\n        );\n    }\n}\n\nexport default MarkdownPreviewer;\n","import React, { PureComponent } from 'react';\nimport classNames from 'classnames';\nimport memoize from 'memoize-one';\nimport { withRouter } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport { createSelector } from 'reselect';\nimport MarkdownPreviewer from '../../components/MarkdownPreviewer';\nimport Loading from '../../components/Loading';\nimport styles from './style.module.scss';\n\nclass EditorPage extends PureComponent {\n    state = {\n        title: '',\n        body: '',\n        milestone: void(0),\n        labels: [],\n    }\n\n    get number() {\n        return memoize(\n            (match) => match.params.number\n        )(this.props.match);\n    }\n\n    static getDerivedStateFromProps(props, state) {\n        const { match, currentIssue, milestonesMap, labelsMap } = props;\n        const { prevCurrentIssue } = state;\n        const number = match.params.number;\n        if (\n            number &&\n            currentIssue &&\n            currentIssue.number === +number &&\n            currentIssue !== prevCurrentIssue\n        ) {\n            const title = currentIssue.title || '';\n            const body = currentIssue.body || '';\n            const milestone = milestonesMap[currentIssue.milestone].number || '';\n            const labels = (currentIssue.labels\n                && currentIssue.labels.nodes\n                && currentIssue.labels.nodes.map(id => {\n                    return labelsMap[id].name;\n                })) || [];\n\n            return {\n                prevCurrentIssue: currentIssue,\n                title,\n                body,\n                milestone,\n                labels,\n            }\n        } else {\n            return null;\n        }\n    }\n\n    componentDidMount() {\n        const { labelsList, milestonesList, dispatch } = this.props;\n        const number = this.number;\n        if (!labelsList.length || !milestonesList.length || number) {\n            dispatch.repository.initEditor(number);\n        }\n    }\n\n    componentWillUnmount() {\n        const { dispatch } = this.props;\n        dispatch.repository.closeCurrentIssue();\n    }\n\n    handleChange = (value) => {\n        this.setState({\n            body: value,\n        });\n    }\n\n    handleTitleChange = (e) => {\n        const title = e.target.value;\n        this.setState({\n            title,\n        });\n    }\n\n    handleRadioClick = (e) => {\n        e.stopPropagation();\n        let input;\n        if (e.target.tagName === 'LABEL') {\n            e.preventDefault();\n            input = e.target.querySelector('input');\n        } else if (e.target.tagName === 'INPUT') {\n            input = e.target;\n        }\n        if (input) {\n            const value = +input.value;\n            if (this.state.milestone === value) {\n                this.setState({\n                    milestone: void(0),\n                });\n            } else {\n                this.setState({\n                    milestone: value,\n                });\n            }\n        }\n        return false;\n    }\n\n    handleCheckboxClick = (e) => {\n        e.stopPropagation();\n        let input;\n        if (e.target.tagName === 'LABEL') {\n            e.preventDefault();\n            input = e.target.querySelector('input');\n        } else if (e.target.tagName === 'INPUT') {\n            input = e.target;\n        }\n        if (input) {\n            const labels = this.state.labels;\n            const value = input.value;\n            const idx = labels.indexOf(value);\n            if (idx !== -1) {\n                labels.splice(idx, 1);\n                this.setState({\n                    labels: [...labels],\n                });\n            } else {\n                labels.push(value);\n                this.setState({\n                    labels: [...labels],\n                });\n            }\n        }\n        return false;\n    }\n\n    handleSubmit = (e) => {\n        e.preventDefault();\n        e.stopPropagation();\n        const { dispatch } = this.props;\n        const { title, body, milestone, labels } = this.state; \n        if (title && body && milestone && labels) {\n            const params = {\n                title,\n                body,\n                labels,\n                milestone,\n                callback: (url) => {\n                    this.props.history.push(url)\n                }\n            };\n            const number = this.number;\n            if (number) {\n                dispatch.repository.editIssue({\n                    ...params,\n                    number,\n                })\n            } else {\n                dispatch.repository.createIssue(params)\n            }\n        }\n    }\n\n    handleBack = () => {\n        this.props.history.goBack();\n    }\n\n    render() {\n        const { labelsList, milestonesList, loading } = this.props;\n        const number = this.number;\n        return (\n            \n            <div className={styles.editorContainer}>\n                <header className={styles.header}>\n                    <i onClick={this.handleBack} className=\"fa fa-chevron-left\"></i>\n                    <p>文章编辑</p>\n                </header>\n                <Loading loading={loading}>\n                    <main>\n                        <form>\n                            <label className={styles.fileds} htmlFor=\"title\">标题：\n                                <input\n                                    type=\"text\"\n                                    id=\"title\"\n                                    className={styles.titleInput}\n                                    defaultValue={this.state.title}\n                                    onChange={this.handleTitleChange}\n                                    />\n                            </label>\n                            <label className={classNames(styles.fileds, styles.editorContent)} htmlFor=\"editor\">内容：\n                                <MarkdownPreviewer\n                                    defaultValue={this.state.body}\n                                    onChange={this.handleChange}\n                                />\n                            </label>\n                            <label className={styles.fileds} htmlFor=\"milestone\">\n                                分类：\n                                {milestonesList.map(milestone => {\n                                    return (\n                                        <label\n                                            key={milestone.id}\n                                            className={styles.checkLabel}\n                                            onClick={this.handleRadioClick}\n                                        >\n                                            <input\n                                                readOnly\n                                                type=\"radio\"\n                                                name=\"categories\"\n                                                value={milestone.number}\n                                                checked={this.state.milestone === milestone.number}\n                                            />\n                                            {milestone.title}\n                                        </label>\n                                    );\n                                })}\n                            </label>\n                            <label className={styles.fileds} htmlFor=\"labels\">\n                                标签：\n                                {labelsList.map(label => {\n                                    return (\n                                        <label\n                                            key={label.id}\n                                            className={styles.checkLabel}\n                                            onClick={this.handleCheckboxClick}\n                                        >\n                                            <input\n                                                readOnly\n                                                type=\"checkbox\"\n                                                value={label.name}\n                                                name={`label-${label.name}`}\n                                                checked={this.state.labels.indexOf(label.name) !== -1}\n                                            />\n                                            {label.name}\n                                        </label>\n                                    );\n                                })}\n                            </label>\n                            <input\n                                type=\"submit\"\n                                value={number ? \"修改\" : \"创建\"}\n                                className={styles.submitButton}\n                                onClick={this.handleSubmit}\n                            />\n                        </form>\n                    </main>\n                </Loading>\n                <footer>\n                    <p>Copyright ©{new Date().getFullYear()} Roy Zhi</p>\n                </footer>\n            </div>\n        );\n    }\n}\n\nconst mapState = createSelector(\n    [\n        store => store.repository.result,\n        store => store.repository.loading,\n        store => store.entities.repositories,\n        store => store.entities.labels,\n        store => store.entities.milestones,\n        store => store.entities.issues,\n    ],\n    (\n        result,\n        loading,\n        repositoriesMap,\n        labelsMap,\n        milestonesMap,\n        issuesMap\n    ) => {\n        let labelsList = [], milestonesList = [], currentIssue;\n        const currentRepository = repositoriesMap[result];\n        if (\n            currentRepository &&\n            currentRepository.labels &&\n            currentRepository.labels.nodes &&\n            currentRepository.milestones &&\n            currentRepository.milestones.nodes\n        ) {\n            labelsList = currentRepository.labels.nodes.map(id => labelsMap[id]);\n            milestonesList = currentRepository.milestones.nodes.map(id => milestonesMap[id]);\n            const currentIssueId = currentRepository.issue;\n            if (currentIssueId) {\n                currentIssue = issuesMap[currentIssueId]\n            }\n        }\n        return {\n            loading,\n            labelsMap,\n            labelsList,\n            milestonesMap,\n            milestonesList,\n            currentIssue,\n        }\n    }\n)\n\nexport default connect(mapState)(withRouter(EditorPage));\n"],"sourceRoot":""}