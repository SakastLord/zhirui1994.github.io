{"version":3,"sources":["components/MarkdownPreviewer/style.module.scss","pages/Editor/style.module.scss","components/MarkdownPreviewer/index.js","pages/Editor/index.js"],"names":["module","exports","markdownPreviewer","editorContainer","header","fileds","checkLabel","submitButton","editorContent","marked","setOptions","breaks","highlight","code","hljs","highlightAuto","value","MarkdownPreviewer","handleInput","e","onChange","_this","props","editor","preventDefault","preview","innerHTML","defaultValue","this","_this2","react_default","a","createElement","className","styles","id","spellCheck","ref","textarea","onInput","section","Component","EditorPage","content","title","milestone","labels","handleChange","handleRadioChange","stopPropagation","input","target","checked","handleCheckboxChange","idx","indexOf","push","splice","handleSubmit","dispatch","number","params","body","callback","url","history","repository","editIssue","Object","objectSpread","createIssue","_this$props","labelsList","milestonesList","length","initEditor","_this$props2","loading","currentIssue","Loading","htmlFor","type","classNames","components_MarkdownPreviewer","map","key","name","defaultChecked","label","concat","nodes","onClick","Date","getFullYear","match","mapState","createSelector","store","result","entities","repositories","milestones","issues","repositoriesMap","labelsMap","milestonesMap","issuesMap","currentRepository","currentIssueId","issue","connect","withRouter"],"mappings":"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","file":"static/js/0.1bd3a9ee.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"markdownPreviewer\":\"style_markdownPreviewer__2WsNP\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"editorContainer\":\"style_editorContainer__1Wmff\",\"header\":\"style_header__1BwOO\",\"fileds\":\"style_fileds__3fShH\",\"checkLabel\":\"style_checkLabel__23t6_\",\"submitButton\":\"style_submitButton__18BxS\",\"editorContent\":\"style_editorContent__KEm5X\"};","import React, { Component } from 'react';\nimport marked from 'marked';\nimport styles from './style.module.scss';\nimport hljs from 'highlight.js';\nimport 'highlight.js/styles/github-gist.css';\n\nmarked.setOptions({\n    breaks: true,\n    highlight: (code) => {\n        return hljs.highlightAuto(code).value;\n    }\n})\n\nclass MarkdownPreviewer extends Component {\n    handleInput = (e) => {\n        const { onChange } = this.props;\n        const value = this.editor.value;\n        e.preventDefault();\n        typeof onChange === 'function' && onChange(value);\n        this.preview.innerHTML = marked(value);\n    }\n\n    componentDidMount() {\n        const { defaultValue } = this.props;\n        if (defaultValue) {\n            this.preview.innerHTML = marked(defaultValue);\n        }\n    }\n\n    render() {\n        const { defaultValue } = this.props;\n        return (\n            <div className={styles.markdownPreviewer}>\n                <textarea\n                    id=\"editor\"\n                    spellCheck=\"false\"\n                    ref={textarea => this.editor = textarea}\n                    onInput={this.handleInput}\n                    defaultValue={defaultValue}\n                ></textarea>\n                <section\n                    id=\"preview\"\n                    ref={section => this.preview = section}\n                ></section>\n            </div>\n        );\n    }\n}\n\nexport default MarkdownPreviewer;\n","import React, { Component } from 'react';\nimport classNames from 'classnames';\nimport { withRouter } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport { createSelector } from 'reselect';\nimport MarkdownPreviewer from '../../components/MarkdownPreviewer';\nimport Loading from '../../components/Loading';\nimport styles from './style.module.scss';\n\nclass EditorPage extends Component {\n    content = '';\n    title = '';\n    milestone = '';\n    labels = [];\n\n    get number() {\n        const { match } = this.props;\n        return match.params.number;\n    }\n\n    get currentIssue() {\n        const { currentIssue } = this.props;\n        const number = this.number;\n        if (number && currentIssue && currentIssue.number === +number) {\n            return currentIssue\n        } else {\n            return {};\n        }\n    }\n\n    componentDidMount() {\n        const { labelsList, milestonesList, dispatch } = this.props;\n        const number = this.number;\n        if (!labelsList.length || !milestonesList.length) {\n            dispatch.repository.initEditor(number);\n        }\n    }\n\n    handleChange = (value) => {\n        this.content = value;\n    }\n\n    handleRadioChange = (e) => {\n        e.preventDefault();\n        e.stopPropagation();\n        const input = e.target;\n        if (input.checked) {\n            this.milestone = input.value;\n        } else {\n            this.milestone = '';\n        }\n    }\n\n    handleCheckboxChange = (e) => {\n        e.preventDefault();\n        e.stopPropagation();\n        const input = e.target;\n        const idx = this.labels.indexOf(input.value);\n        if (input.checked) {\n            if (idx === -1) {\n                this.labels.push(input.value);\n            }\n        } else {\n            if (idx !== -1) {\n                this.labels.splice(idx, 1);\n            }\n        }\n    }\n\n    handleSubmit = (e) => {\n        e.preventDefault();\n        e.stopPropagation();\n        const { dispatch } = this.props;\n        const number = this.number;\n        if (this.title && this.content) {\n            const params = {\n                title: this.title.value,\n                body: this.content,\n                labels: this.labels,\n                milestone: this.milestone,\n                callback: (url) => {\n                    this.props.history.push(url)\n                }\n            };\n            if (number) {\n                dispatch.repository.editIssue({\n                    ...params,\n                    number,\n                })\n            } else {\n                dispatch.repository.createIssue(params)\n            }\n        }\n    }\n\n    render() {\n        const { labelsList, milestonesList, loading } = this.props;\n        const defaultValue = this.currentIssue.body;\n        const number = this.number;\n        return (\n            <Loading loading={loading}>\n        <div className={styles.editorContainer}>\n            <header className={styles.header}>\n                <h2>文章编辑页</h2>\n            </header>\n            <main>\n                <form>\n                    <label className={styles.fileds} htmlFor=\"title\">标题：\n                        <input defaultValue={this.currentIssue.title} ref={input => this.title = input} type=\"text\" id=\"title\" />\n                    </label>\n                    <label className={classNames(styles.fileds, styles.editorContent)} htmlFor=\"editor\">内容：\n                        <MarkdownPreviewer\n                            defaultValue={defaultValue}\n                            onChange={this.handleChange}\n                        />\n                    </label>\n                    <label className={styles.fileds} htmlFor=\"milestone\">\n                        分类：\n                        {milestonesList.map(milestone => {\n                            return (\n                                <label key={milestone.id} className={styles.checkLabel}>\n                                    <input\n                                        type=\"radio\"\n                                        name=\"categories\"\n                                        value={milestone.number}\n                                        onChange={this.handleRadioChange}\n                                        defaultChecked={this.currentIssue.milestone && this.currentIssue.milestone === milestone.id}\n                                    />\n                                    {milestone.title}\n                                </label>\n                            );\n                        })}\n                    </label>\n                    <label className={styles.fileds} htmlFor=\"labels\">\n                        标签：\n                        {labelsList.map(label => {\n                            return (\n                                <label key={label.id} className={styles.checkLabel}>\n                                    <input\n                                        type=\"checkbox\"\n                                        value={label.name}\n                                        name={`label-${label.name}`}\n                                        onChange={this.handleCheckboxChange}\n                                        defaultChecked={this.currentIssue.labels && this.currentIssue.labels.nodes.indexOf(label.id) !== -1}\n                                    />\n                                    {label.name}\n                                </label>\n                            );\n                        })}\n                    </label>\n                    <input className={styles.submitButton} onClick={this.handleSubmit} type=\"submit\" value={number ? \"修改\" : \"创建\"} />\n                </form>\n            </main>\n            <footer>\n                <p>Copyright ©{new Date().getFullYear()} Roy Zhi</p>\n            </footer>\n        </div>\n        </Loading>\n        );\n    }\n}\n\nconst mapState = createSelector(\n    [\n        store => store.repository.result,\n        store => store.repository.loading,\n        store => store.entities.repositories,\n        store => store.entities.labels,\n        store => store.entities.milestones,\n        store => store.entities.issues,\n    ],\n    (\n        result,\n        loading,\n        repositoriesMap,\n        labelsMap,\n        milestonesMap,\n        issuesMap\n    ) => {\n        let labelsList = [], milestonesList = [], currentIssue;\n        const currentRepository = repositoriesMap[result];\n        if (\n            currentRepository &&\n            currentRepository.labels &&\n            currentRepository.labels.nodes &&\n            currentRepository.milestones &&\n            currentRepository.milestones.nodes\n        ) {\n            labelsList = currentRepository.labels.nodes.map(id => labelsMap[id]);\n            milestonesList = currentRepository.milestones.nodes.map(id => milestonesMap[id]);\n            const currentIssueId = currentRepository.issue;\n            if (currentIssueId) {\n                currentIssue = issuesMap[currentIssueId]\n            }\n        }\n        return {\n            loading,\n            labelsList,\n            milestonesList,\n            currentIssue,\n        }\n    }\n)\n\nexport default connect(mapState)(withRouter(EditorPage));\n"],"sourceRoot":""}